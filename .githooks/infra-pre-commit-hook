#!/bin/bash
set -euo pipefail

# Pre-commit —Ö—É–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã AquaStream
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
# Collect staged file names once for reuse across checks
CHANGED_FILES="$(git diff --cached --name-only)"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
NC="\033[0m"; GREEN="\033[0;32m"; YELLOW="\033[0;33m"; RED="\033[0;31m"

error_flag=0

log() {
    local level="$1"; shift
    local msg="$*"
    local color="$GREEN"
    case "$level" in
      INFO)  color="$GREEN";;
      WARN)  color="$YELLOW";;
      ERROR) color="$RED";;
    esac
    echo -e "üîç ${color}${level}${NC} $msg"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
has_infrastructure_changes() {
    local changed_files="$1"

    echo "$changed_files" | grep -E "^(backend-infra/(docker/(compose/.*|images/.*|scripts/.*)|backup/.*)|\.githooks/infra-pre-commit-hook|Dockerfile.*|.*Dockerfile|.*\.sh|.*\.env)$" >/dev/null
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
check_critical_files() {
    local changed_files="$1"
    local exit_code=0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose —Ñ–∞–π–ª—ã
    local compose_changes
    compose_changes=$(echo "$changed_files" | grep -E '^backend-infra/docker/compose/.*\.ya?ml$' || true)
    if [ -n "$compose_changes" ]; then
        while IFS= read -r rel; do
            [ -z "$rel" ] && continue
            local file="$PROJECT_ROOT/$rel"
            [ ! -f "$file" ] && continue
            log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ $rel..."

            if grep -n ":latest" "$file" >/dev/null; then
                log ERROR "‚ùå –í $rel –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–≥ :latest ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±—Ä–∞–∑–∞."
                exit_code=1
            fi

            while IFS= read -r line; do
                [ -z "$line" ] && continue
                local num="${line%%:*}"
                local content="${line#*:}"
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if [[ "${content}" =~ ^[[:space:]]*# ]]; then
                    continue
                fi
                # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É ${VAR}
                if [[ "$content" =~ \$\{ ]]; then
                    continue
                fi
                log ERROR "‚ùå –í–æ–∑–º–æ–∂–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –≤ $rel:$num ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—Ä–∞—Ç—å—Å—è –∏–∑ env_file (${content// / })."
                exit_code=1
            done < <(grep -nEi '\b(password|secret|token|key)\b\s*:' "$file" || true)
        done <<< "$compose_changes"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
    if echo "$changed_files" | grep -q "\.env"; then
        log WARN "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ!"
        log WARN "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env —Ñ–∞–π–ª –≤ .gitignore
        if [ -f "$PROJECT_ROOT/.gitignore" ]; then
            if ! grep -q "\.env" "$PROJECT_ROOT/.gitignore"; then
                log ERROR "‚ùå .env —Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore!"
                exit_code=1
            fi
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º shell —Å–∫—Ä–∏–ø—Ç—ã
    local scripts_changed
    scripts_changed=$(echo "$changed_files" | grep "\.sh$" || true)

    if [ -n "$scripts_changed" ]; then
        log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ shell —Å–∫—Ä–∏–ø—Ç–æ–≤..."

        while IFS= read -r script; do
            [ -z "$script" ] && continue
            if [ -f "$PROJECT_ROOT/$script" ]; then
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ bash
                if ! bash -n "$PROJECT_ROOT/$script" 2>/dev/null; then
                    log ERROR "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ $script!"
                    exit_code=1
                fi

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∞–≤–∞
                if [ ! -x "$PROJECT_ROOT/$script" ]; then
                    log WARN "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç $script –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º..."
                    chmod +x "$PROJECT_ROOT/$script"
                    git add "$PROJECT_ROOT/$script"
                fi
            fi
        done <<< "$scripts_changed"
    fi

    return $exit_code
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YAML —Ñ–∞–π–ª–æ–≤
check_yaml_formatting() {
    local changed_files="$1"
    local yaml_files
    yaml_files=$(echo "$changed_files" | grep -E "\.(yml|yaml)$" || true)

    if [ -n "$yaml_files" ] && command -v yq >/dev/null 2>&1; then
        log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

        local yaml_err=0
        while IFS= read -r yaml_file; do
            [ -z "$yaml_file" ] && continue
            if [ -f "$PROJECT_ROOT/$yaml_file" ]; then
                if ! yq eval '.' "$PROJECT_ROOT/$yaml_file" >/dev/null 2>&1; then
                    log ERROR "‚ùå –û—à–∏–±–∫–∞ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ $yaml_file!"
                    yaml_err=1
                fi
            fi
        done <<< "$yaml_files"

        if [ $yaml_err -ne 0 ]; then
            return 1
        fi
    fi
}

run_hadolint() {
    local changed_files="$1"
    if ! command -v hadolint >/dev/null 2>&1; then
        log INFO "‚ÑπÔ∏è hadolint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Dockerfile"
        return 0
    fi

    local dockerfiles
    dockerfiles=$(echo "$changed_files" | grep -E '(Dockerfile(\.[^/]+)?|backend-infra/docker/images/[^/]+)$' || true)
    if [ -z "$dockerfiles" ]; then
        return 0
    fi

    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile —á–µ—Ä–µ–∑ hadolint..."
    local hadolint_err=0
    while IFS= read -r df; do
        [ -z "$df" ] && continue
        local path="$PROJECT_ROOT/$df"
        [ ! -f "$path" ] && continue
        if ! hadolint "$path"; then
            log ERROR "‚ùå hadolint –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ $df"
            hadolint_err=1
        fi
    done <<< "$dockerfiles"

    if [ $hadolint_err -ne 0 ]; then
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ pre-commit —Ö—É–∫–∞
main() {
    log INFO "üöÄ –ó–∞–ø—É—Å–∫ pre-commit –≤–∞–ª–∏–¥–∞—Ü–∏–∏ AquaStream"

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if ! has_infrastructure_changes "$CHANGED_FILES"; then
        log INFO "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        exit 0
    fi

    log INFO "üìã –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"

    local exit_code=0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    if ! check_critical_files "$CHANGED_FILES"; then
        exit_code=1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º YAML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if ! check_yaml_formatting "$CHANGED_FILES"; then
        exit_code=1
    fi

    if ! run_hadolint "$CHANGED_FILES"; then
        exit_code=1
    fi

    if [ $exit_code -eq 0 ]; then
        log INFO "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–æ–º–º–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω."
    else
        log ERROR "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã! –ö–æ–º–º–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        echo
        log INFO "üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:"
        log INFO "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ docker-compose/Dockerfile/.env/yaml"
        log INFO "  ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"
        log INFO "  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç"
        echo
        log INFO "üö´ –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø):"
        log INFO "  ‚Ä¢ git commit --no-verify"
    fi

    exit $exit_code
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
main "$@"
