#!/bin/bash
set -euo pipefail

# Pre-commit —Ö—É–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã AquaStream
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
# Collect staged file names once for reuse across checks
CHANGED_FILES="$(git diff --cached --name-only)"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
NC="\033[0m"; GREEN="\033[0;32m"; YELLOW="\033[0;33m"; RED="\033[0;31m"

log() {
    local level="$1"; shift
    local msg="$*"
    local color="$GREEN"
    case "$level" in
      INFO)  color="$GREEN";;
      WARN)  color="$YELLOW";;
      ERROR) color="$RED";;
    esac
    echo -e "üîç ${color}${level}${NC} $msg"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
has_infrastructure_changes() {
    local changed_files="$1"

    echo "$changed_files" | grep -E "(docker-compose\.dev\.yml|docker-compose\.full\.yml|Dockerfile|\.env|nginx\.conf|prometheus\.yml|logstash\.conf|\.sh)$" >/dev/null
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
check_critical_files() {
    local changed_files="$1"
    local exit_code=0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.dev.yml –∏ docker-compose.full.yml –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    local compose_files=("docker-compose.dev.yml" "docker-compose.full.yml")
    for compose in "${compose_files[@]}"; do
        if echo "$changed_files" | grep -q "$compose"; then
            log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ $compose..."

            local compose_file="$PROJECT_ROOT/infra/docker/compose/$compose"
            if [ -f "$compose_file" ]; then
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Docker Compose
                if ! docker compose -f "$compose_file" config >/dev/null 2>&1; then
                    log ERROR "‚ùå –û—à–∏–±–∫–∞ –≤ $compose —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ!"
                    log ERROR "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker compose -f $compose_file config"
                    exit_code=1
                fi

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ :latest —Ç–µ–≥–∏
                if grep -q ":latest" "$compose_file"; then
                    log ERROR "‚ùå –ù–∞–π–¥–µ–Ω—ã :latest —Ç–µ–≥–∏ –≤ $compose!"
                    log ERROR "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–æ–≤."
                    exit_code=1
                fi

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hardcoded –ø–∞—Ä–æ–ª–∏
                if grep -E "(password|secret|key).*=" "$compose_file" | grep -v "\\$\\{" >/dev/null; then
                    log ERROR "‚ùå –ù–∞–π–¥–µ–Ω—ã hardcoded –ø–∞—Ä–æ–ª–∏ –≤ $compose!"
                    log ERROR "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
                    exit_code=1
                fi
            fi
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
    if echo "$changed_files" | grep -q "\.env"; then
        log WARN "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ!"
        log WARN "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env —Ñ–∞–π–ª –≤ .gitignore
        if [ -f "$PROJECT_ROOT/.gitignore" ]; then
            if ! grep -q "\.env" "$PROJECT_ROOT/.gitignore"; then
                log ERROR "‚ùå .env —Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore!"
                exit_code=1
            fi
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º shell —Å–∫—Ä–∏–ø—Ç—ã
    local scripts_changed
    scripts_changed=$(echo "$changed_files" | grep "\.sh$" || true)

    if [ -n "$scripts_changed" ]; then
        log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ shell —Å–∫—Ä–∏–ø—Ç–æ–≤..."

        echo "$scripts_changed" | while read script; do
            if [ -f "$PROJECT_ROOT/$script" ]; then
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ bash
                if ! bash -n "$PROJECT_ROOT/$script" 2>/dev/null; then
                    log ERROR "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ $script!"
                    exit_code=1
                fi

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∞–≤–∞
                if [ ! -x "$PROJECT_ROOT/$script" ]; then
                    log WARN "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç $script –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º..."
                    chmod +x "$PROJECT_ROOT/$script"
                    git add "$PROJECT_ROOT/$script"
                fi
            fi
        done
    fi

    return $exit_code
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
run_full_validation() {
    log INFO "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    local validation_script="$PROJECT_ROOT/infra/scripts/validate-infrastructure.sh"
    
    if [ -f "$validation_script" ]; then
        if "$validation_script" --quick; then
            log INFO "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            return 0
        else
            log ERROR "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!"
            log ERROR "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: $validation_script"
            return 1
        fi
    else
        log WARN "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YAML —Ñ–∞–π–ª–æ–≤
check_yaml_formatting() {
    local changed_files="$1"
    local yaml_files
    yaml_files=$(echo "$changed_files" | grep -E "\.(yml|yaml)$" || true)

    if [ -n "$yaml_files" ] && command -v yq >/dev/null 2>&1; then
        log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

        echo "$yaml_files" | while read yaml_file; do
            if [ -f "$PROJECT_ROOT/$yaml_file" ]; then
                if ! yq eval '.' "$PROJECT_ROOT/$yaml_file" >/dev/null 2>&1; then
                    log ERROR "‚ùå –û—à–∏–±–∫–∞ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ $yaml_file!"
                    return 1
                fi
            fi
        done
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ pre-commit —Ö—É–∫–∞
main() {
    log INFO "üöÄ –ó–∞–ø—É—Å–∫ pre-commit –≤–∞–ª–∏–¥–∞—Ü–∏–∏ AquaStream"

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if ! has_infrastructure_changes "$CHANGED_FILES"; then
        log INFO "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        exit 0
    fi

    log INFO "üìã –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"

    local exit_code=0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    if ! check_critical_files "$CHANGED_FILES"; then
        exit_code=1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º YAML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if ! check_yaml_formatting "$CHANGED_FILES"; then
        exit_code=1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if echo "$CHANGED_FILES" | grep -q -E "(docker-compose\.dev\.yml|docker-compose\.full\.yml|Dockerfile)"; then
        if ! run_full_validation; then
            exit_code=1
        fi
    fi

    if [ $exit_code -eq 0 ]; then
        log INFO "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–æ–º–º–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω."
    else
        log ERROR "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã! –ö–æ–º–º–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        echo
        log INFO "üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:"
        log INFO "  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./infra/scripts/validate-infrastructure.sh"
        log INFO "  ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"
        log INFO "  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç"
        echo
        log INFO "üö´ –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø):"
        log INFO "  ‚Ä¢ git commit --no-verify"
    fi

    exit $exit_code
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
main "$@"
