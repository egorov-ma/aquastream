---
name: Security Scan

permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [main]
    paths:
      - 'infra/docker/images/**'
      - '.github/workflows/security.yml'

jobs:
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        service: [backend-user, backend-gateway, backend-event, backend-notification, backend-crew, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Trivy vulnerability database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ github.run_number }}
          restore-keys: trivy-db-

      - name: Set up JDK 21
        if: matrix.service != 'frontend'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Set up Node.js
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Build Java applications
        if: matrix.service != 'frontend'
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: Build frontend application
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Build Docker image (Backend)
        if: matrix.service != 'frontend'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/images/Dockerfile.${{ matrix.service }}
          tags: aquastream-${{ matrix.service }}:security-scan
          build-args: |
            ECLIPSE_TEMURIN_JDK_TAG=21-jdk-alpine
            ECLIPSE_TEMURIN_JRE_TAG=21-jre-alpine
          load: true
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

      - name: Build Docker image (Frontend)
        if: matrix.service == 'frontend'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/images/Dockerfile.frontend
          tags: aquastream-frontend:security-scan
          load: true
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: aquastream-${{ matrix.service }}:security-scan
          format: sarif
          output: trivy-${{ matrix.service }}-results.sarif
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-${{ matrix.service }}-results.sarif


  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build application
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: Prepare test environment
        env:
          POSTGRES_PASSWORD: test_password
          GRAFANA_ADMIN_PASSWORD: test_password
          ELASTIC_PASSWORD: test_password
          KIBANA_PASSWORD: test_password
        run: envsubst < infra/docker/compose/.env.ci > infra/docker/compose/.env

      - name: Start infrastructure services
        run: |
          cd infra/docker/compose
          docker compose up -d --wait --wait-timeout 120 postgres kafka zookeeper

      - name: Run integration tests
        run: ./gradlew integrationTest

      - name: Health check services
        run: |
          cd infra/docker/compose
          docker compose exec postgres pg_isready -U postgres -d aquastream_db || exit 1
          docker compose exec kafka kafka-topics --bootstrap-server localhost:9092 --list || exit 1

      - name: Cleanup
        if: always()
        run: |
          cd infra/docker/compose
          docker compose down -v
