name: Docker Images CI

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend-*/**'
      - 'backend-infra/docker/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle/**'
      - '.github/workflows/ci-images.yml'
  push:
    branches: [ main ]
    paths:
      - 'backend-*/**'
      - 'backend-infra/docker/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'gradle/**'
      - '.github/workflows/ci-images.yml'
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-jars:
    name: Build backend JARs (once)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Set up JDK 21
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v3

      - name: Assemble backend JARs
        run: ./gradlew -x test assemble

      - name: Upload backend JARs artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: backend-jars
          if-no-files-found: error
          retention-days: 7
          path: |
            backend-*/**/build/libs/*.jar
            backend-gateway/build/libs/*.jar

  images:
    name: "Build${{ github.event_name == 'pull_request' && ' (no push)' || '' }} - ${{ matrix.service }}"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [ build-jars ]
    strategy:
      fail-fast: false
      matrix:
        service: [ gateway, user, event, crew, payment, notification, media ]

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-jars
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Mark image build start
        run: echo "IMG_BUILD_START=$(date +%s)" >> "$GITHUB_ENV"

      - name: Compute metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          OWNER_RAW="${{ github.repository_owner }}"
          OWNER_LOWER="$(echo -n "$OWNER_RAW" | tr '[:upper:]' '[:lower:]')"
          SERVICE="${{ matrix.service }}"
          IMAGE="ghcr.io/${OWNER_LOWER}/aquastream-backend-${SERVICE}"
          SHORT_SHA="$(git rev-parse --short=7 HEAD)"
          TAGS=("${IMAGE}:sha-${SHORT_SHA}")
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION_TAG="${GITHUB_REF#refs/tags/}"
            TAGS+=("${IMAGE}:${VERSION_TAG}" "${IMAGE}:latest")
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION_TAG="${{ github.event.release.tag_name }}"
            TAGS+=("${IMAGE}:${VERSION_TAG}" "${IMAGE}:latest")
          fi
          # JAR path mapping per service
          case "$SERVICE" in
            gateway)     JAR_FILE="backend-gateway/build/libs/backend-gateway-*.jar" ; DF="backend-infra/docker/images/Dockerfile.gateway" ;;
            user)        JAR_FILE="backend-user/backend-user-api/build/libs/backend-user-api-*.jar" ; DF="backend-infra/docker/images/Dockerfile.user" ;;
            event)       JAR_FILE="backend-event/backend-event-api/build/libs/backend-event-api-*.jar" ; DF="backend-infra/docker/images/Dockerfile.event" ;;
            crew)        JAR_FILE="backend-crew/backend-crew-api/build/libs/backend-crew-api-*.jar" ; DF="backend-infra/docker/images/Dockerfile.crew" ;;
            payment)     JAR_FILE="backend-payment/backend-payment-api/build/libs/backend-payment-api-*.jar" ; DF="backend-infra/docker/images/Dockerfile.payment" ;;
            notification)JAR_FILE="backend-notification/backend-notification-api/build/libs/backend-notification-api-*.jar" ; DF="backend-infra/docker/images/Dockerfile.notification" ;;
            media)       JAR_FILE="backend-media/backend-media-api/build/libs/backend-media-api-*.jar" ; DF="backend-infra/docker/images/Dockerfile.media" ;;
            *) echo "::error::Unknown service: $SERVICE"; exit 1;;
          esac
          printf 'image=%s\n' "$IMAGE" >> "$GITHUB_OUTPUT"
          {
            echo 'tags<<TAGS'
            printf '%s\n' "${TAGS[@]}"
            echo 'TAGS'
          } >> "$GITHUB_OUTPUT"
          printf 'jar_file=%s\n' "$JAR_FILE" >> "$GITHUB_OUTPUT"
          printf 'dockerfile=%s\n' "$DF" >> "$GITHUB_OUTPUT"
          printf 'short_sha=%s\n' "$SHORT_SHA" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image (PR, no push)
        if: github.event_name == 'pull_request'
        id: build_pr
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ steps.meta.outputs.dockerfile }}
          platforms: linux/amd64
          build-args: |
            JAR_FILE=${{ steps.meta.outputs.jar_file }}
          load: true
          tags: ${{ steps.meta.outputs.image }}:sha-${{ steps.meta.outputs.short_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Scan (PR only)
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.meta.outputs.image }}:sha-${{ steps.meta.outputs.short_sha }}
          format: 'table'
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Build and Push image
        if: github.event_name != 'pull_request'
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ steps.meta.outputs.dockerfile }}
          platforms: linux/amd64
          build-args: |
            JAR_FILE=${{ steps.meta.outputs.jar_file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        shell: bash
        run: |
          echo "### Итог по образу" >> "$GITHUB_STEP_SUMMARY"
          echo "- Сервис: ${{ matrix.service }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Образ:  ${{ steps.meta.outputs.image }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Commit: ${{ github.sha }}" >> "$GITHUB_STEP_SUMMARY"
          if [[ -n "${IMG_BUILD_START:-}" ]]; then NOW=$(date +%s); DUR=$((NOW-IMG_BUILD_START)); printf -- "- Время сборки образа: %02d:%02d\n" $((DUR/60)) $((DUR%60)) >> "$GITHUB_STEP_SUMMARY"; fi
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IMG_TAG="${{ steps.meta.outputs.image }}:sha-${{ steps.meta.outputs.short_sha }}"
            SIZE_BYTES=$(docker image inspect "$IMG_TAG" --format '{{.Size}}' 2>/dev/null || echo 0)
            if [[ "$SIZE_BYTES" != "0" ]]; then
              SIZE_HUMAN=$(awk -v b="$SIZE_BYTES" 'BEGIN{printf "%.1f MiB", b/1024/1024}')
              echo "- Размер локального образа: $SIZE_HUMAN" >> "$GITHUB_STEP_SUMMARY"
            fi
            echo "- Собран (без публикации): $IMG_TAG" >> "$GITHUB_STEP_SUMMARY"
            DIGEST="${{ steps.build_pr.outputs.digest }}"
            if [[ -n "$DIGEST" ]]; then
              echo "- Digest: $DIGEST" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "- Опубликованные теги:" >> "$GITHUB_STEP_SUMMARY"
            echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r t; do echo "  - $t" >> "$GITHUB_STEP_SUMMARY"; done
            DIGEST="${{ steps.build_push.outputs.digest }}"
            if [[ -n "$DIGEST" ]]; then
              echo "- Digest: $DIGEST" >> "$GITHUB_STEP_SUMMARY"
            fi
          fi
