name: Docs CI

on:
  pull_request:
    paths:
      - 'docs/**'
      - 'docs/docs-tools/mkdocs.yml'
      - 'docs/docs-tools/requirements-docs.txt'
      - 'docs/docs-tools/tools/**'
      - '.github/workflows/docs-ci.yml'
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'docs/docs-tools/mkdocs.yml'
      - 'docs/docs-tools/requirements-docs.txt'
      - 'docs/docs-tools/tools/**'
      - '.github/workflows/docs-ci.yml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Enable problem matcher (warnings/errors)
        run: echo "::add-matcher::.github/matchers/generic.json"

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('docs/docs-tools/requirements-docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/docs-tools/requirements-docs.txt

      - name: Mark docs build start
        run: echo "DOCS_BUILD_START=$(date +%s)" >> "$GITHUB_ENV"

      - name: Build MkDocs
        run: |
          cd docs/docs-tools && mkdocs build --strict

      - name: Upload site artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: site
          path: ./build/docs

      - name: Summary
        shell: bash
        run: |
          echo "### Docs CI — сборка документации" >> "$GITHUB_STEP_SUMMARY"
          echo "- Сайт успешно собран (MkDocs --strict)" >> "$GITHUB_STEP_SUMMARY"
          if [[ -n "${DOCS_BUILD_START:-}" ]]; then NOW=$(date +%s); DUR=$((NOW-DOCS_BUILD_START)); printf -- "- Время сборки: %02d:%02d\n" $((DUR/60)) $((DUR%60)) >> "$GITHUB_STEP_SUMMARY"; fi
          if [[ -d build/docs ]]; then
            SIZE=$(du -sh build/docs | awk '{print $1}')
            PAGES=$(find build/docs -type f -name '*.html' | wc -l | tr -d ' ')
            echo "- Размер: $SIZE" >> "$GITHUB_STEP_SUMMARY"
            echo "- Кол-во страниц (HTML): $PAGES" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "- Артефакт: site" >> "$GITHUB_STEP_SUMMARY"
