name: Reusable Service CI

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      image_name:
        required: true
        type: string
      service_dir:
        required: false
        type: string
        default: '.'
      dockerfile:
        required: false
        type: string
        default: ''
      java_version:
        required: false
        type: string
        default: '21'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    name: "Build ${{ inputs.service_name }}"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.service_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Gradle build (unit tests)
        run: ./gradlew --no-daemon clean build

      - name: Liquibase dry-run (update-sql)
        run: ./gradlew --no-daemon liquibaseUpdateSQL
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (default)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to custom registry (optional)
        if: ${{ secrets.REGISTRY_USERNAME != '' && secrets.REGISTRY_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Compute image tags
        id: meta
        run: |
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER,,}"
          IMAGE_BASE="${{ env.REGISTRY }}/$REPO_OWNER/${{ inputs.image_name }}"
          SHA_TAG="sha-${GITHUB_SHA::7}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "tags=${IMAGE_BASE}:${GITHUB_REF_NAME},${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT
          else
            echo "tags=${IMAGE_BASE}:latest,${IMAGE_BASE}:${SHA_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.service_dir }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}


