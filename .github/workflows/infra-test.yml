name: Infrastructure Scripts Testing

on:
  push:
    paths:
      - 'infra/docker/scripts/**'
      - 'infra/docker/config/**'
      - 'infra/docker/compose/**'
      - 'infra/monitoring/**'
      - '.github/workflows/infra-test.yml'
  pull_request:
    paths:
      - 'infra/docker/scripts/**'
      - 'infra/docker/config/**'
      - 'infra/docker/compose/**'
      - 'infra/monitoring/**'
      - '.github/workflows/infra-test.yml'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Запустить тесты в режиме отладки'
        required: false
        default: false
        type: boolean

jobs:
  shellcheck:
    name: Shell Scripts Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get install -y shellcheck

      - name: Run ShellCheck
        run: |
          find infra/docker/scripts -type f -name "*.sh" | xargs shellcheck -e SC2164 -e SC1091

      - name: Check script permissions
        run: |
          # Проверяем, что все скрипты исполняемые
          ERRORS=0
          for script in $(find infra/docker/scripts -type f -name "*.sh"); do
            if [[ ! -x "$script" ]]; then
              echo "Error: $script is not executable"
              ERRORS=$((ERRORS+1))
            fi
          done
          
          if [[ $ERRORS -gt 0 ]]; then
            echo "Found $ERRORS scripts with incorrect permissions"
            exit 1
          fi
          
          echo "All scripts have correct permissions"
  
  docker-compose:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Docker Compose files
        run: |
          for file in infra/docker/compose/docker-compose*.yml; do
            echo "Validating $file..."
            docker-compose -f $file config > /dev/null
            if [[ $? -eq 0 ]]; then
              echo "✅ $file is valid"
            else
              echo "❌ $file is invalid"
              exit 1
            fi
          done

  nginx-config:
    name: Nginx Configuration Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Test Nginx configuration
        run: |
          # Проверка синтаксиса nginx.conf
          sudo cp infra/docker/config/canary/nginx.conf /etc/nginx/nginx.conf
          sudo nginx -t
          
          # Если есть другие конфигурации, тоже проверяем их
          for conf in $(find infra/docker/config -name "*.conf"); do
            echo "Testing $conf..."
            cp $conf /tmp/test.conf
            sudo nginx -c /tmp/test.conf -t
          done

  elk-config:
    name: ELK Stack Configuration Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Java for Logstash
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: Validate Logstash configuration
        run: |
          # Проверяем наличие конфигурационных файлов
          if [[ ! -f infra/monitoring/logstash/config/logstash.yml ]]; then
            echo "Error: Logstash config file is missing"
            exit 1
          fi
          
          if [[ ! -f infra/monitoring/logstash/pipeline/logstash.conf ]]; then
            echo "Error: Logstash pipeline file is missing"
            exit 1
          fi
          
          # Проверяем синтаксис конфигурации Logstash (базовая проверка)
          cat infra/monitoring/logstash/pipeline/logstash.conf | grep -q "input {" && \
          cat infra/monitoring/logstash/pipeline/logstash.conf | grep -q "filter {" && \
          cat infra/monitoring/logstash/pipeline/logstash.conf | grep -q "output {"
          
          if [[ $? -eq 0 ]]; then
            echo "✅ Logstash pipeline syntax seems valid"
          else
            echo "❌ Logstash pipeline syntax check failed"
            exit 1
          fi
          
          # Проверяем конфигурацию Elasticsearch в Logstash
          if grep -q "elasticsearch" infra/monitoring/logstash/config/logstash.yml; then
            echo "✅ Elasticsearch configuration found in Logstash config"
          else
            echo "❌ Missing Elasticsearch configuration in Logstash"
            exit 1
          fi
      
      - name: Check Java dependencies for ELK integration
        run: |
          # Проверяем наличие зависимости logstash-logback-encoder в build.gradle файлах
          ERRORS=0
          for file in $(find . -name "build.gradle" -type f); do
            if ! grep -q "logstash-logback-encoder" "$file" && \
               (grep -q "spring-boot" "$file" || grep -q "implementation " "$file"); then
              echo "Warning: $file might need logstash-logback-encoder dependency"
              ERRORS=$((ERRORS+1))
            fi
          done
          
          if [[ $ERRORS -gt 0 ]]; then
            echo "Found $ERRORS potential issues with logstash dependencies"
            # Это предупреждение, не фейлим сборку
          else
            echo "✅ Logstash dependencies are properly configured"
          fi
          
      - name: Validate logback configuration
        run: |
          # Проверяем наличие и валидность logback-spring.xml
          LOGBACK_FILES=$(find . -name "logback*.xml" -type f)
          
          if [[ -z "$LOGBACK_FILES" ]]; then
            echo "❌ No Logback configuration files found"
            exit 1
          fi
          
          for file in $LOGBACK_FILES; do
            echo "Checking $file for Logstash appender..."
            if grep -q "LogstashTcpSocketAppender" "$file"; then
              echo "✅ Logstash appender found in $file"
            fi
          done

  scripts-test:
    name: Integration Test Scripts
    runs-on: ubuntu-latest
    needs: [shellcheck, docker-compose, nginx-config, elk-config]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          mkdir -p infra/docker/logs
          chmod -R 755 infra/docker/scripts/*.sh

      - name: Test utils.sh
        run: |
          echo 'source ./infra/docker/scripts/utils.sh && log_info "Library loaded successfully"' > test.sh
          chmod +x test.sh
          ./test.sh | grep "Library loaded successfully"

      - name: Test cleanup-logs.sh (dry run)
        run: |
          # Создаем тестовые файлы логов
          mkdir -p infra/docker/logs/test
          touch infra/docker/logs/test/sample.log
          
          # Запускаем скрипт в dry-run режиме
          ./infra/docker/scripts/cleanup-logs.sh --dry-run -v
          
          # Проверяем, что скрипт не удалил файлы (т.к. dry-run)
          if [[ -f infra/docker/logs/test/sample.log ]]; then
            echo "Dry run mode works correctly, did not delete files"
          else
            echo "Error: Dry run mode deleted files incorrectly"
            exit 1
          fi

      - name: Test canary-alerts.sh (help mode)
        run: |
          ./infra/docker/scripts/canary-alerts.sh --help | grep "Использование"
          
          # Создаем тестовую конфигурацию оповещений
          mkdir -p infra/docker/config/canary/alerts
          ./infra/docker/scripts/canary-alerts.sh --metrics 25 --errors-threshold 10 --latency-threshold 800 -v
          
          # Проверяем, что конфигурационный файл создан
          if [[ -f infra/docker/config/canary/alerts/alerts_config.json ]]; then
            echo "Alerts configuration file created successfully"
            cat infra/docker/config/canary/alerts/alerts_config.json
          else
            echo "Error: Failed to create alerts configuration file"
            exit 1
          fi

      - name: Test canary.sh (help mode)
        run: |
          ./infra/docker/scripts/canary.sh --help | grep "Usage"

      - name: Test ab-test.sh (help mode)
        run: |
          ./infra/docker/scripts/ab-test.sh --help | grep "Usage"
          
      - name: Test fix-logstash.sh (help mode)
        run: |
          ./infra/docker/scripts/fix-logstash.sh --help || echo "Help flag not implemented"
          # Проверяем, что скрипт запускается без ошибок
          ./infra/docker/scripts/fix-logstash.sh --dry-run || echo "Dry run flag not implemented"

  canary-config-test:
    name: Canary Configuration Test
    runs-on: ubuntu-latest
    needs: [scripts-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check canary configuration
        run: |
          # Проверка настроек Grafana
          if [[ ! -d infra/docker/config/canary/grafana/dashboards ]]; then
            echo "Error: Grafana dashboards directory is missing"
            exit 1
          fi
          
          if [[ ! -d infra/docker/config/canary/grafana/provisioning ]]; then
            echo "Error: Grafana provisioning directory is missing"
            exit 1
          fi
          
          # Проверка наличия основных файлов конфигурации
          files_to_check=(
            "infra/docker/config/canary/nginx.conf"
            "infra/docker/config/canary/grafana/dashboards/canary.json"
            "infra/docker/config/canary/grafana/provisioning/datasources/prometheus.yaml"
            "infra/docker/config/canary/grafana/provisioning/dashboards/canary.yaml"
            "infra/docker/compose/docker-compose.canary.yml"
          )
          
          for file in "${files_to_check[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "Error: Required file $file is missing"
              exit 1
            else
              echo "✅ $file exists"
            fi
          done
          
          # Проверяем, что директория оповещений существует
          mkdir -p infra/docker/config/canary/alerts
          
          # Создаем тестовый файл конфигурации оповещений
          cat > infra/docker/config/canary/alerts/alerts_config.json << EOF
          {
            "notifications": {
              "slack": {
                "enabled": false,
                "webhook_url": ""
              },
              "email": {
                "enabled": false,
                "recipients": ""
              }
            },
            "thresholds": {
              "metrics_deviation_percent": 20,
              "error_count": 5,
              "latency_ms": 500
            },
            "check_interval_minutes": 5,
            "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          echo "Alerts configuration file created for testing"
          echo "All required canary configuration files are present"
  
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check README.md
        run: |
          # Проверяем наличие основных разделов в README.md
          if ! grep -q "Canary Deployment" infra/README.md; then
            echo "Error: README.md is missing section about Canary Deployment"
            exit 1
          fi
          
          if ! grep -q "A/B тестирование" infra/README.md; then
            echo "Error: README.md is missing section about A/B testing"
            exit 1
          fi
          
          if ! grep -q "Управление логами" infra/README.md; then
            echo "Error: README.md is missing section about log management"
            exit 1
          fi
          
          # Проверка наличия информации о системе оповещений
          if ! grep -q "Система оповещений" infra/README.md; then
            echo "Error: README.md is missing section about alerts system"
            exit 1
          fi
          
          # Проверка наличия информации об ELK Stack
          if ! grep -q "Elasticsearch" infra/README.md && ! grep -q "Logstash" infra/README.md; then
            echo "Warning: README.md may be missing information about ELK Stack"
          fi
          
          echo "README.md contains all required sections"
          
      - name: Check ELK Stack documentation
        run: |
          # Проверяем наличие документации для ELK Stack
          if ! grep -q "Elasticsearch" common/README.md || ! grep -q "Logstash" common/README.md; then
            echo "Warning: common/README.md may be missing detailed information about ELK Stack"
          else
            echo "✅ ELK Stack documentation found in common module"
          fi

  build-script-test:
    name: Build Script Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Check build.sh script
        run: |
          # Проверяем, что скрипт build.sh существует и исполняемый
          if [[ ! -f build.sh ]]; then
            echo "Error: build.sh script is missing"
            exit 1
          fi
          
          if [[ ! -x build.sh ]]; then
            echo "Error: build.sh is not executable"
            chmod +x build.sh
          fi
          
          # Проверяем help флаг build.sh
          ./build.sh --help || echo "Help flag might not be implemented"
          
          # Проверяем опцию канареечной сборки
          if ! grep -q -- "--canary" build.sh; then
            echo "Warning: build.sh might be missing canary build option"
          else
            echo "✅ Canary build option found in build.sh"
          fi

  report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [shellcheck, docker-compose, nginx-config, elk-config, scripts-test, canary-config-test, documentation-check, build-script-test]
    if: always()
    steps:
      - name: Report Results
        run: |
          echo "## Infrastructure Tests Report" > report.md
          echo "### Results" >> report.md
          
          shellcheck_result="${{ needs.shellcheck.result }}"
          docker_compose_result="${{ needs.docker-compose.result }}"
          nginx_config_result="${{ needs.nginx-config.result }}"
          elk_config_result="${{ needs.elk-config.result }}"
          scripts_test_result="${{ needs.scripts-test.result }}"
          canary_config_result="${{ needs.canary-config-test.result }}"
          docs_result="${{ needs.documentation-check.result }}"
          build_result="${{ needs.build-script-test.result }}"
          
          echo "| Test | Result |" >> report.md
          echo "|------|--------|" >> report.md
          echo "| ShellCheck | ${shellcheck_result} |" >> report.md
          echo "| Docker Compose Validation | ${docker_compose_result} |" >> report.md
          echo "| Nginx Configuration | ${nginx_config_result} |" >> report.md
          echo "| ELK Stack Configuration | ${elk_config_result} |" >> report.md
          echo "| Scripts Integration Test | ${scripts_test_result} |" >> report.md
          echo "| Canary Configuration | ${canary_config_result} |" >> report.md
          echo "| Documentation Check | ${docs_result} |" >> report.md
          echo "| Build Script Test | ${build_result} |" >> report.md
          
          cat report.md
      
      - name: Upload Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-test-report
          path: report.md 