name: Canary Deployment

on:
  push:
    branches: [ canary/* ]
  workflow_dispatch:
    inputs:
      canary_version:
        description: 'Версия для канареечного деплоя (например 1.2.3)'
        required: true
      traffic_percentage:
        description: 'Процент трафика на канареечную версию (1-100)'
        required: true
        default: '10'
      test_endpoints:
        description: 'Эндпоинты для тестирования (через запятую)'
        required: false
        default: '/api/health,/api/users/me'
      enable_alerts:
        description: 'Включить автоматические оповещения'
        required: false
        default: true
        type: boolean

env:
  CANARY_VERSION: ${{ github.event.inputs.canary_version || github.ref_name }}
  TRAFFIC_PERCENTAGE: ${{ github.event.inputs.traffic_percentage || '10' }}
  TEST_ENDPOINTS: ${{ github.event.inputs.test_endpoints || '/api/health,/api/users/me' }}
  ENABLE_ALERTS: ${{ github.event.inputs.enable_alerts || 'true' }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REGISTRY: registry.example.com

jobs:
  prepare:
    name: Подготовка к канареечному деплою
    runs-on: ubuntu-latest
    outputs:
      canary_version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Проверка входных параметров
        run: |
          echo "Канареечная версия: $CANARY_VERSION"
          echo "Процент трафика: $TRAFFIC_PERCENTAGE"
          echo "Тестируемые эндпоинты: $TEST_ENDPOINTS"
          echo "Автоматические оповещения: $ENABLE_ALERTS"
      
      - name: Извлечение версии из названия ветки
        id: extract_version
        run: |
          if [[ "$CANARY_VERSION" == canary/* ]]; then
            VERSION="${CANARY_VERSION#canary/}"
          else
            VERSION="$CANARY_VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Извлеченная версия: $VERSION"

  build:
    name: Сборка канареечной версии
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Настройка JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
          
      - name: Настройка Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Сборка канареечной версии
        run: |
          ./build.sh --canary ${{ needs.prepare.outputs.canary_version }} --verbose
          
      - name: Загрузка артефактов
        uses: actions/upload-artifact@v4
        with:
          name: canary-build-artifacts
          path: |
            backend-*/build/libs/*.jar
            frontend/build
            
  test:
    name: Тестирование канареечной версии
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Загрузка артефактов сборки
        uses: actions/download-artifact@v4
        with:
          name: canary-build-artifacts
          
      - name: Подготовка тестовой среды
        run: |
          mkdir -p test-reports
          
      - name: Запуск функциональных тестов
        run: |
          ./gradlew functionalTest -Pcanary=true -Pversion=${{ needs.prepare.outputs.canary_version }}-canary
          
      - name: Запуск интеграционных тестов
        run: |
          ./gradlew integrationTest -Pcanary=true -Pversion=${{ needs.prepare.outputs.canary_version }}-canary
          
      - name: Загрузка отчетов о тестировании
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-reports
          
  security_scan:
    name: Проверка безопасности
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Загрузка артефактов сборки
        uses: actions/download-artifact@v4
        with:
          name: canary-build-artifacts
          
      - name: Сканирование зависимостей
        uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false
          
      - name: OWASP сканирование
        run: |
          ./gradlew dependencyCheckAnalyze
          
      - name: Загрузка отчета по безопасности
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: build/reports/dependency-check-report.html
          
  build_images:
    name: Сборка Docker образов
    needs: [prepare, test, security_scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Загрузка артефактов сборки
        uses: actions/download-artifact@v4
        with:
          name: canary-build-artifacts
          
      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Авторизация в Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          
      - name: Сборка и публикация API Gateway образа
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          push: true
          tags: ${{ env.REGISTRY }}/aquastream/api-gateway:${{ needs.prepare.outputs.canary_version }}-canary
          
      - name: Сборка и публикация User Service образа
        uses: docker/build-push-action@v4
        with:
          context: ./backend-user
          push: true
          tags: ${{ env.REGISTRY }}/aquastream/user-service:${{ needs.prepare.outputs.canary_version }}-canary
          
      - name: Сборка и публикация остальных образов
        run: |
          # Сборка остальных сервисов
          for service in backend-catalog backend-order; do
            docker build -t ${{ env.REGISTRY }}/aquastream/$service:${{ needs.prepare.outputs.canary_version }}-canary ./$service
            docker push ${{ env.REGISTRY }}/aquastream/$service:${{ needs.prepare.outputs.canary_version }}-canary
          done
          
  deploy_canary:
    name: Деплой канареечной версии
    needs: [prepare, build_images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Настройка kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          
      - name: Обновление Docker Compose конфигурации
        run: |
          mkdir -p deploy
          
          # Экспорт переменных окружения для канареечного деплоя
          cat > deploy/.env << EOF
          CANARY_VERSION=${{ needs.prepare.outputs.canary_version }}-canary
          TRAFFIC_PERCENTAGE=${{ env.TRAFFIC_PERCENTAGE }}
          EOF
          
          # Копирование и настройка Docker Compose файлов
          cp infra/docker/compose/docker-compose.canary.yml deploy/
          
      - name: Деплой канареечной версии
        run: |
          cd deploy
          
          # Обновление конфигурации в Kubernetes
          kubectl apply -f k8s/canary/
          
          # Обновление версии и процента трафика
          kubectl set env deployment/traffic-manager CANARY_VERSION=${{ needs.prepare.outputs.canary_version }}-canary
          kubectl set env deployment/traffic-manager CANARY_TRAFFIC_PERCENT=${{ env.TRAFFIC_PERCENTAGE }}
          
          echo "Канареечная версия успешно развернута. Процент трафика: ${{ env.TRAFFIC_PERCENTAGE }}%"
          
      - name: Проверка доступности сервисов
        run: |
          # Ожидание готовности сервисов
          kubectl rollout status deployment/api-gateway-canary
          kubectl rollout status deployment/user-service-canary
          
          # Вывод информации о подах
          kubectl get pods -l app=aquastream,version=canary
          
  configure_alerts:
    name: Настройка оповещений
    needs: [deploy_canary]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.enable_alerts != 'false' }}
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Установка зависимостей
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc curl

      - name: Настройка оповещений
        run: |
          # Создаем директории для конфигурации, если их нет
          mkdir -p infra/docker/config/canary/alerts
          
          # Настройка пороговых значений
          ./infra/docker/scripts/canary-alerts.sh --metrics 25 --errors-threshold 8 --latency-threshold 600 --interval 5
          
          # Настройка Slack оповещений, если токен доступен
          if [[ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]]; then
            ./infra/docker/scripts/canary-alerts.sh --slack "${{ secrets.SLACK_WEBHOOK_URL }}"
            echo "Настроены оповещения в Slack"
          fi
          
          # Настройка Email оповещений, если указаны получатели
          if [[ -n "${{ secrets.ALERT_EMAIL_RECIPIENTS }}" ]]; then
            ./infra/docker/scripts/canary-alerts.sh --email "${{ secrets.ALERT_EMAIL_RECIPIENTS }}"
            echo "Настроены оповещения по Email"
          fi
          
          echo "Сохранение конфигурации оповещений для канареечной версии ${{ needs.prepare.outputs.canary_version }}"
          cat infra/docker/config/canary/alerts/alerts_config.json
          
      - name: Отправка тестового оповещения
        run: |
          ./infra/docker/scripts/canary-alerts.sh --test
          
      - name: Запуск системы оповещений в Kubernetes
        run: |
          # Создаем ConfigMap для конфигурации оповещений
          kubectl create configmap canary-alerts-config --from-file=infra/docker/config/canary/alerts/alerts_config.json -o yaml --dry-run=client | kubectl apply -f -
          
          # Применяем деплоймент для системы оповещений
          cat << EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: canary-alerts
            labels:
              app: aquastream
              component: canary-alerts
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: aquastream
                component: canary-alerts
            template:
              metadata:
                labels:
                  app: aquastream
                  component: canary-alerts
              spec:
                containers:
                - name: canary-alerts
                  image: ${{ env.REGISTRY }}/aquastream/base-image:latest
                  command: ["/bin/bash", "-c"]
                  args:
                  - |
                    mkdir -p /app/infra/docker/config/canary/alerts
                    cp /config/alerts_config.json /app/infra/docker/config/canary/alerts/
                    cd /app
                    ./infra/docker/scripts/canary-alerts.sh --verbose
                  volumeMounts:
                  - name: alerts-config
                    mountPath: /config
                volumes:
                - name: alerts-config
                  configMap:
                    name: canary-alerts-config
          EOF
          
          # Проверяем запуск пода с системой оповещений
          kubectl rollout status deployment/canary-alerts
          
      - name: Добавление информации об оповещениях
        run: |
          echo "Система оповещений настроена и запущена для канареечной версии ${{ needs.prepare.outputs.canary_version }}"
          echo "Пороговые значения: отклонение метрик - 25%, ошибки - 8, задержка - 600 мс"
          echo "Интервал проверки: 5 минут"
          
  perform_ab_test:
    name: A/B тестирование
    needs: [prepare, deploy_canary, configure_alerts]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4
        
      - name: Установка зависимостей
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils bc
          
      - name: Создание директории для отчетов
        run: |
          mkdir -p test-reports/ab-test
          
      - name: Подготовка эндпоинтов для тестирования
        run: |
          # Преобразуем список эндпоинтов из строки в массив
          IFS=',' read -ra ENDPOINTS <<< "${{ env.TEST_ENDPOINTS }}"
          
          # Формируем строку с опциями для ab-test.sh
          ENDPOINT_OPTS=""
          for endpoint in "${ENDPOINTS[@]}"; do
            ENDPOINT_OPTS="$ENDPOINT_OPTS -e $endpoint"
          done
          
          echo "ENDPOINT_OPTS=$ENDPOINT_OPTS" >> $GITHUB_ENV
          
      - name: Запуск A/B тестирования
        run: |
          ./infra/docker/scripts/ab-test.sh -n 1000 -c 20 ${{ env.ENDPOINT_OPTS }} \
            -s api.example.com:80 \
            -k canary-api.example.com:80 \
            -o test-reports/ab-test \
            --html --json --csv
            
      - name: Загрузка отчетов A/B тестирования
        uses: actions/upload-artifact@v4
        with:
          name: ab-test-reports
          path: test-reports/ab-test
          
      - name: Анализ результатов A/B тестирования
        id: ab_test_analysis
        run: |
          # Проверка результатов из JSON-отчётов
          results_json=$(find test-reports/ab-test -name "*.json" -type f)
          
          # Флаг для решения о продвижении
          promote_flag=true
          
          for result in $results_json; do
            recommendation=$(jq -r '.comparison.recommendation' $result)
            endpoint=$(jq -r '.test_info.endpoint' $result)
            
            echo "Эндпоинт $endpoint: рекомендация - $recommendation"
            
            if [ "$recommendation" == "rollback" ]; then
              promote_flag=false
              echo "::warning::Проблемы с производительностью обнаружены в эндпоинте $endpoint"
            fi
          done
          
          # Сохраняем решение как output
          echo "promote_recommended=$promote_flag" >> $GITHUB_OUTPUT
          
          if [ "$promote_flag" == "true" ]; then
            echo "✅ Все тесты прошли успешно. Рекомендуется продвижение канареечной версии."
          else
            echo "⚠️ Обнаружены проблемы в канареечной версии. Не рекомендуется продвижение."
          fi
          
  promote_decision:
    name: Решение о продвижении
    needs: [prepare, perform_ab_test]
    runs-on: ubuntu-latest
    steps:
      - name: Проверка результатов тестирования
        run: |
          if [ "${{ needs.perform_ab_test.outputs.promote_recommended }}" == "true" ]; then
            echo "✅ Рекомендуется продвижение канареечной версии ${{ needs.prepare.outputs.canary_version }}"
            echo "Посетите Grafana для просмотра метрик: https://grafana.example.com/d/canary/canary-deployment"
          else
            echo "⚠️ Не рекомендуется продвижение версии ${{ needs.prepare.outputs.canary_version }}"
            echo "Рекомендуется ручная проверка и анализ результатов A/B тестирования"
          fi
          
      - name: Создание запроса на продвижение
        if: needs.perform_ab_test.outputs.promote_recommended == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚀 Продвижение канареечной версии ${{ needs.prepare.outputs.canary_version }}',
              body: `
              # Запрос на продвижение канареечной версии
              
              ## Версия
              - **Канареечная версия:** ${{ needs.prepare.outputs.canary_version }}
              
              ## Результаты тестирования
              - ✅ A/B тестирование пройдено успешно
              - 📊 Текущий процент трафика: ${{ env.TRAFFIC_PERCENTAGE }}%
              
              ## Необходимые действия
              1. Проверьте метрики в [Grafana](https://grafana.example.com/d/canary/canary-deployment)
              2. Если всё в порядке, запустите ручной workflow для продвижения:
                 \`\`\`
                 ./infra/docker/scripts/canary.sh -x
                 \`\`\`
              
              ## Связанные артефакты
              - [Отчеты A/B тестирования](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              /cc @DevOps @QA
              `
            })
            
      - name: Создание уведомления о проблемах
        if: needs.perform_ab_test.outputs.promote_recommended != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Проблемы с канареечной версией ${{ needs.prepare.outputs.canary_version }}',
              body: `
              # Обнаружены проблемы с канареечной версией
              
              ## Версия
              - **Канареечная версия:** ${{ needs.prepare.outputs.canary_version }}
              
              ## Результаты тестирования
              - ❌ A/B тестирование выявило проблемы
              - 📊 Текущий процент трафика: ${{ env.TRAFFIC_PERCENTAGE }}%
              
              ## Необходимые действия
              1. Проверьте метрики в [Grafana](https://grafana.example.com/d/canary/canary-deployment)
              2. Проанализируйте логи канареечных сервисов
              3. Проверьте оповещения на наличие дополнительной информации о проблемах
              4. Решите, нужно ли остановить канареечный деплой:
                 \`\`\`
                 ./infra/docker/scripts/canary.sh -p
                 \`\`\`
              
              ## Связанные артефакты
              - [Отчеты A/B тестирования](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              /cc @DevOps @Development
              `
            }) 