plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.protobuf'
}

group = 'org.aquastream'


repositories {
    mavenCentral()
    maven { url = uri('https://jitpack.io') }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.kafka:spring-kafka:${rootProject.springKafkaVersion}"
    implementation project(':common')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    implementation "io.grpc:grpc-netty-shaded:${rootProject.grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${rootProject.grpcVersion}"
    implementation "io.grpc:grpc-stub:${rootProject.grpcVersion}"
    implementation "io.grpc:grpc-services:${rootProject.grpcVersion}"
    implementation "net.devh:grpc-server-spring-boot-starter:${rootProject.grpcSpringBootStarterVersion}"
    
    implementation "jakarta.annotation:jakarta.annotation-api:${rootProject.jakartaAnnotationVersion}"
    implementation "javax.annotation:javax.annotation-api:${rootProject.javaxAnnotationVersion}"
    
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.h2database:h2:${rootProject.h2Version}"
    testImplementation "org.springframework.kafka:spring-kafka-test:${rootProject.springKafkaVersion}"
    
    // Testcontainers for integration tests
    testImplementation "org.testcontainers:junit-jupiter:${rootProject.testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${rootProject.testcontainersVersion}"
    testImplementation "org.testcontainers:kafka:${rootProject.testcontainersVersion}"
    
    // gRPC testing
    testImplementation "io.grpc:grpc-testing:${rootProject.grpcTestingVersion}"

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${rootProject.springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-common:${rootProject.springDocVersion}"
    
    // gRPC-Gateway для генерации REST API из gRPC
    implementation "com.google.api.grpc:proto-google-common-protos:${rootProject.googleCommonProtosVersion}"
    
    // Structured logging
    implementation "net.logstash.logback:logstash-logback-encoder:${rootProject.logstashLogbackVersion}"
    
    // AOP for logging aspects
    implementation 'org.springframework.boot:spring-boot-starter-aop'
}


test {
    useJUnitPlatform()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${rootProject.protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${rootProject.grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

clean {
    delete 'build/generated/source/proto'
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootJar {
    mainClass = 'org.aquastream.event.EventApplication'
}