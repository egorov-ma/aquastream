#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

echo "üîç Running pre-commit checks..."

# ========== FRONTEND CHECKS ==========
if [ -d "frontend" ]; then
    cd frontend
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript..."
    npx tsc --noEmit || exit 1

    # –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞
    echo "üîç –ó–∞–ø—É—Å–∫ ESLint..."
    npx lint-staged || exit 1

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–π–¥–∂–µ–π –ø–æ–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if [ -f "coverage/coverage-final.json" ]; then
      echo "üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞..."
      node scripts/generate-coverage-badge.js || exit 1
    fi
    
    cd "$PROJECT_ROOT"
fi

# ========== JAVA BACKEND CHECKS ==========
# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ staged Java —Ñ–∞–π–ª–æ–≤
STAGED_JAVA_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.java$' || true)

if [ -n "$STAGED_JAVA_FILES" ]; then
    echo ""
    echo "üìÅ Found staged Java files:"
    echo "$STAGED_JAVA_FILES" | sed 's/^/  /'
    echo ""
    echo "üîç Running Java code quality checks..."
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ System.out.println
    PRINTLN_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l "System\.out\.println" 2>/dev/null || true)
    if [ -n "$PRINTLN_FILES" ]; then
        print_error "Found System.out.println in staged files (use logger instead):"
        echo "$PRINTLN_FILES" | sed 's/^/  /'
        exit 1
    fi

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ System.err.println
    ERRPRINTLN_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l "System\.err\.println" 2>/dev/null || true)
    if [ -n "$ERRPRINTLN_FILES" ]; then
        print_error "Found System.err.println in staged files (use logger instead):"
        echo "$ERRPRINTLN_FILES" | sed 's/^/  /'
        exit 1
    fi

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ printStackTrace
    PRINTSTACKTRACE_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l "\.printStackTrace()" 2>/dev/null || true)
    if [ -n "$PRINTSTACKTRACE_FILES" ]; then
        print_error "Found printStackTrace() in staged files (use logger instead):"
        echo "$PRINTSTACKTRACE_FILES" | sed 's/^/  /'
        exit 1
    fi

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    TODO_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l "//.*TODO\|/\*.*TODO" 2>/dev/null || true)
    if [ -n "$TODO_FILES" ]; then
        print_warning "Found TODO comments in staged files:"
        echo "$TODO_FILES" | sed 's/^/  /'
        echo "Consider addressing these before committing"
    fi

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ FIXME –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    FIXME_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l "//.*FIXME\|/\*.*FIXME" 2>/dev/null || true)
    if [ -n "$FIXME_FILES" ]; then
        print_error "Found FIXME comments in staged files:"
        echo "$FIXME_FILES" | sed 's/^/  /'
        echo "Please address FIXME comments before committing"
        exit 1
    fi

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏/—Å–µ–∫—Ä–µ—Ç—ã
    SECRET_PATTERNS="password\s*=\s*[\"'][^\"']+[\"']|secret\s*=\s*[\"'][^\"']+[\"']|key\s*=\s*[\"'][^\"']+[\"']|token\s*=\s*[\"'][^\"']+[\"']"
    SECRET_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l -i -E "$SECRET_PATTERNS" 2>/dev/null || true)
    if [ -n "$SECRET_FILES" ]; then
        print_error "Potential hardcoded secrets found in staged files:"
        echo "$SECRET_FILES" | sed 's/^/  /'
        echo "Please use environment variables or secure configuration instead"
        exit 1
    fi

    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ wildcard imports
    WILDCARD_FILES=$(echo "$STAGED_JAVA_FILES" | xargs grep -l "import.*\.\*;" 2>/dev/null | xargs grep -v "import static\|import java.util.*\|import org.junit.*" 2>/dev/null || true)
    if [ -n "$WILDCARD_FILES" ]; then
        print_warning "Found wildcard imports in staged files (consider specific imports):"
        echo "$WILDCARD_FILES" | sed 's/^/  /'
    fi

    # 8. –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å Gradle –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if [ -f "$PROJECT_ROOT/gradlew" ] && [ -x "$PROJECT_ROOT/gradlew" ]; then
        print_status "Running Gradle compile check..."
        cd "$PROJECT_ROOT"
        if ! ./gradlew compileJava -q; then
            print_error "Gradle compile check failed"
            exit 1
        fi
    fi

    print_status "All Java code quality checks passed!"
fi

# ========== INFRASTRUCTURE CHECKS ==========
# –í—ã–∑—ã–≤–∞–µ–º infrastructure hook –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
INFRA_FILES=$(git diff --cached --name-only | grep -E "(docker-compose\.yml|Dockerfile|\.env|nginx\.conf|prometheus\.yml|logstash\.conf|\.sh)$" || true)

if [ -n "$INFRA_FILES" ]; then
    if [ -f "$PROJECT_ROOT/.githooks/pre-commit" ]; then
        echo ""
        echo "üèóÔ∏è Running infrastructure checks..."
        "$PROJECT_ROOT/.githooks/pre-commit" || exit 1
    fi
fi

echo ""
print_status "All pre-commit checks passed! üöÄ" 