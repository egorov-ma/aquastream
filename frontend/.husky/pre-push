#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-push hook for running tests before pushing
set -e

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

echo "🧪 Running pre-push checks..."

# Определяем корень проекта
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Получаем информацию о push
remote="$1"
url="$2"

# Читаем информацию о refs из stdin
while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        print_info "Branch deletion detected, skipping tests"
        continue
    fi
    
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # Новая ветка, проверяем против main/master
        if git show-ref --verify --quiet refs/remotes/origin/main; then
            range="origin/main..$local_sha"
        elif git show-ref --verify --quiet refs/remotes/origin/master; then
            range="origin/master..$local_sha"
        else
            range="$local_sha"
        fi
    else
        # Обновление существующей ветки
        range="$remote_sha..$local_sha"
    fi
    
    # Проверяем есть ли коммиты для push
    if [ -z "$(git rev-list $range 2>/dev/null)" ]; then
        print_info "No new commits to push"
        continue
    fi
    
    print_info "Checking commits in range: $range"
    
    # ========== FRONTEND TESTS ==========
    # Проверяем изменения в frontend
    FRONTEND_FILES_CHANGED=$(git diff --name-only $range | grep '^frontend/' || true)
    
    if [ -n "$FRONTEND_FILES_CHANGED" ]; then
        echo "📁 Frontend files changed:"
        echo "$FRONTEND_FILES_CHANGED" | sed 's/^/  /'
        
        cd "$PROJECT_ROOT/frontend"
        
        # Проверяем TypeScript компиляцию
        print_status "Checking TypeScript compilation..."
        if ! npx tsc --noEmit; then
            print_error "TypeScript compilation failed!"
            exit 1
        fi
        
        # Запускаем тесты frontend если они есть
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
            print_status "Running frontend tests..."
            if timeout 300 npm test -- --watchAll=false --passWithNoTests; then
                print_status "Frontend tests passed!"
            else
                exit_code=$?
                if [ $exit_code -eq 124 ]; then
                    print_error "Frontend tests timed out after 5 minutes"
                else
                    print_error "Frontend tests failed!"
                fi
                exit 1
            fi
        else
            print_warning "No frontend tests configured"
        fi
        
        cd "$PROJECT_ROOT"
    fi
    
    # ========== JAVA BACKEND TESTS ==========
    # Проверяем изменения в Java файлах
    JAVA_FILES_CHANGED=$(git diff --name-only $range | grep '\.java$' || true)
    
    if [ -n "$JAVA_FILES_CHANGED" ]; then
        echo ""
        echo "📁 Java files changed:"
        echo "$JAVA_FILES_CHANGED" | sed 's/^/  /'
        
        cd "$PROJECT_ROOT"
        
        # Проверяем компиляцию
        if [ -f "gradlew" ] && [ -x "gradlew" ]; then
            print_status "Compiling Java code..."
            if ! ./gradlew compileJava compileTestJava -q; then
                print_error "Java compilation failed! Cannot push broken code."
                exit 1
            fi
            
            # Запускаем Java тесты
            if find . -name "*Test.java" -o -name "*Tests.java" | grep -q .; then
                print_status "Running Java tests..."
                
                if timeout 300 ./gradlew test -q --no-daemon; then
                    print_status "All Java tests passed!"
                else
                    exit_code=$?
                    if [ $exit_code -eq 124 ]; then
                        print_error "Java tests timed out after 5 minutes"
                    else
                        print_error "Java tests failed! Check test results before pushing."
                        
                        # Показываем отчеты о тестах если доступны
                        if [ -d "build/reports/tests/test" ]; then
                            print_info "Test report available at: build/reports/tests/test/index.html"
                        fi
                    fi
                    exit 1
                fi
            else
                print_warning "No Java test files found"
            fi
        elif [ -f "pom.xml" ]; then
            print_info "Running Maven tests..."
            
            if command -v mvn >/dev/null 2>&1; then
                print_status "Compiling Java code..."
                if ! mvn compile test-compile -q; then
                    print_error "Maven compilation failed!"
                    exit 1
                fi
                
                print_status "Running Java tests..."
                if timeout 300 mvn test -q; then
                    print_status "All Maven tests passed!"
                else
                    exit_code=$?
                    if [ $exit_code -eq 124 ]; then
                        print_error "Maven tests timed out after 5 minutes"
                    else
                        print_error "Maven tests failed!"
                    fi
                    exit 1
                fi
            else
                print_error "Maven not found but pom.xml exists"
                exit 1
            fi
        fi
    fi
done

print_status "Pre-push checks completed successfully! 🚀"
echo ""