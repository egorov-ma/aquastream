#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –≤ AquaStream
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ .env —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ Docker Secrets

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_DIR="${SCRIPT_DIR}/../docker/compose"
ENV_FILE="${COMPOSE_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∞–±—ã—Ö –ø–∞—Ä–æ–ª–µ–π
check_weak_passwords() {
    local has_weak=false
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ª–∞–±–æ—Å—Ç–∏..."
    
    if grep -q "POSTGRES_PASSWORD=postgres" "${ENV_FILE}" 2>/dev/null; then
        log_error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å PostgreSQL: 'postgres'"
        has_weak=true
    fi
    
    if grep -q "GRAFANA_ADMIN_PASSWORD=admin" "${ENV_FILE}" 2>/dev/null; then
        log_error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å Grafana: 'admin'"
        has_weak=true
    fi
    
    if grep -q "ELASTIC_PASSWORD=changeMe123!" "${ENV_FILE}" 2>/dev/null; then
        log_error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å Elasticsearch: 'changeMe123!'"
        has_weak=true
    fi
    
    if grep -q "KIBANA_PASSWORD=kibanaUser123!" "${ENV_FILE}" 2>/dev/null; then
        log_error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å Kibana: 'kibanaUser123!'"
        has_weak=true
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏
    if grep -qE "PASSWORD=\s*$" "${ENV_FILE}" 2>/dev/null; then
        log_error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏"
        has_weak=true
    fi
    
    if $has_weak; then
        log_warn "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏!"
        echo
        return 1
    else
        log_success "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
check_password_strength() {
    local password="$1"
    local min_length=12
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if [[ ${#password} -lt $min_length ]]; then
        echo "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º $min_length —Å–∏–º–≤–æ–ª–æ–≤)"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
    local has_upper=false
    local has_lower=false
    local has_digit=false
    local has_special=false
    
    if [[ "$password" =~ [A-Z] ]]; then has_upper=true; fi
    if [[ "$password" =~ [a-z] ]]; then has_lower=true; fi
    if [[ "$password" =~ [0-9] ]]; then has_digit=true; fi
    if [[ "$password" =~ [^A-Za-z0-9] ]]; then has_special=true; fi
    
    local score=0
    $has_upper && ((score++))
    $has_lower && ((score++)) 
    $has_digit && ((score++))
    $has_special && ((score++))
    
    if [[ $score -lt 3 ]]; then
        echo "–ü–∞—Ä–æ–ª—å —Å–ª–∞–±—ã–π. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 –∏–∑ 4: –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    local common_words=("password" "admin" "user" "test" "demo" "default" "changeme" "postgres" "grafana" "elastic" "kibana")
    local lower_password="${password,,}"
    
    for word in "${common_words[@]}"; do
        if [[ "$lower_password" == *"$word"* ]]; then
            echo "–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ: $word"
            return 1
        fi
    done
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
input_password() {
    local service_name="$1"
    local password
    local confirm_password
    
    while true; do
        read -s -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${service_name}: " password
        echo
        
        if ! check_password_strength "$password"; then
            log_warn "–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            continue
        fi
        
        read -s -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: " confirm_password
        echo
        
        if [[ "$password" != "$confirm_password" ]]; then
            log_warn "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            continue
        fi
        
        echo "$password"
        return 0
    done
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–∞—Ä–æ–ª—è–º–∏
stop_services_with_passwords() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –ø–∞—Ä–æ–ª–∏..."
    
    cd "${COMPOSE_DIR}"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–∞—Ä–æ–ª–∏
    local services=("postgres" "elasticsearch" "kibana" "logstash" "grafana" "user-service" "crew-service" "notification-service")
    
    for service in "${services[@]}"; do
        if docker compose ps -q "$service" >/dev/null 2>&1; then
            log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ $service..."
            docker compose stop "$service" 2>/dev/null || true
        fi
    done
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏..."
    
    cd "${COMPOSE_DIR}"
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    docker compose up -d --force-recreate postgres elasticsearch 2>/dev/null || {
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        return 1
    }
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 10
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    docker compose up -d 2>/dev/null || {
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        return 1
    }
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "========== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π AquaStream =========="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if [[ ! -f "${ENV_FILE}" ]]; then
        log_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: ${ENV_FILE}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–æ–ª–∏
    if ! check_weak_passwords; then
        log_warn "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π!"
        echo
    else
        echo
        read -p "–í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª–∏? [y/N]: " force_update
        if [[ ! "${force_update,,}" =~ ^(y|yes)$ ]]; then
            log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 0
        fi
    fi
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:"
    echo "1) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo "2) –í–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –≤—Ä—É—á–Ω—É—é"
    echo "3) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç generate-secrets.sh"
    read -p "–í–∞—à –≤—ã–±–æ—Ä [1-3]: " choice
    
    case $choice in
        1)
            log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π..."
            "${SCRIPT_DIR}/generate-secrets.sh"
            ;;
        2)
            log_info "–í–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –≤—Ä—É—á–Ω—É—é..."
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            cp "${ENV_FILE}" "${ENV_FILE}.backup.$(date +%Y%m%d-%H%M%S)"
            
            # –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏
            POSTGRES_PASS=$(input_password "PostgreSQL")
            GRAFANA_PASS=$(input_password "Grafana Admin")
            ELASTIC_PASS=$(input_password "Elasticsearch")
            KIBANA_PASS=$(input_password "Kibana")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º .env
            sed -i.tmp \
                -e "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${POSTGRES_PASS}/" \
                -e "s/^GRAFANA_ADMIN_PASSWORD=.*/GRAFANA_ADMIN_PASSWORD=${GRAFANA_PASS}/" \
                -e "s/^ELASTIC_PASSWORD=.*/ELASTIC_PASSWORD=${ELASTIC_PASS}/" \
                -e "s/^KIBANA_PASSWORD=.*/KIBANA_PASSWORD=${KIBANA_PASS}/" \
                "${ENV_FILE}"
            
            rm -f "${ENV_FILE}.tmp"
            log_success "–ü–∞—Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ"
            ;;
        3)
            log_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
            "${SCRIPT_DIR}/generate-secrets.sh"
            ;;
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
            ;;
    esac
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    echo
    log_warn "‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Å–µ–π—á–∞—Å? [y/N]: " restart_services
    
    if [[ "${restart_services,,}" =~ ^(y|yes)$ ]]; then
        stop_services_with_passwords
        start_services
        log_success "–ü–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
    else
        log_warn "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: docker compose down && docker compose up -d"
    fi
    
    echo
    log_success "========== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ =========="
}

# –ó–∞–ø—É—Å–∫
main "$@"