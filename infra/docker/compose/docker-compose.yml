services:
  api-gateway:
    container_name: aquastream-api
    build:
      context: ../../../
      dockerfile: infra/docker/images/Dockerfile.backend-gateway
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - planning-service
      - crew-service
      - notification-service
    networks:
      aquastream-network:
        aliases:
          - api-gateway
    image: aquastream-api:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000

  user-service:
    container_name: aquastream-user
    build:
      context: ../../../
      dockerfile: infra/docker/images/Dockerfile.backend-user
    ports:
      - "8081:8081"
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aquastream_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    networks:
      - aquastream-network
    image: aquastream-user:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  planning-service:
    container_name: aquastream-planning
    build:
      context: ../../../
      dockerfile: infra/docker/images/Dockerfile.backend-event
    ports:
      - "8082:8082"
      - "9090:9090"
    networks:
      - aquastream-network
    environment:
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000

  crew-service:
    container_name: aquastream-crew
    build:
      context: ../../../
      dockerfile: infra/docker/images/Dockerfile.backend-crew
    ports:
      - "8083:8083"
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aquastream_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    networks:
      - aquastream-network

  notification-service:
    container_name: aquastream-notification
    build:
      context: ../../../
      dockerfile: infra/docker/images/Dockerfile.backend-notification
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aquastream_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    networks:
      - aquastream-network

  postgres:
    container_name: aquastream-postgres
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=aquastream_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    container_name: aquastream-kafka
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    container_name: aquastream-zookeeper
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - aquastream-network

  frontend:
    container_name: aquastream-frontend
    build:
      context: ../../../
      dockerfile: infra/docker/images/Dockerfile.frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - aquastream-network

  prometheus:
    container_name: aquastream-prometheus
    image: prom/prometheus:latest
    volumes:
      - ../../../infra/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    container_name: aquastream-grafana
    image: grafana/grafana:latest
    volumes:
      - ../../../infra/monitoring/grafana/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/grafana-dashboard.json
    ports:
      - "3001:3000"
    networks:
      - aquastream-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    container_name: aquastream-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green'"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    container_name: aquastream-logstash
    image: docker.elastic.co/logstash/logstash:8.12.1
    volumes:
      - ../../../infra/monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ../../../infra/monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5001:5000"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    networks:
      - aquastream-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 | grep -q 'status.*green'"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    container_name: aquastream-kibana
    image: docker.elastic.co/kibana/kibana:8.12.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - aquastream-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q 'status.*green'"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  aquastream-network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
