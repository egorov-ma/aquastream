version: '3.8'

# Конфигурация канареечного развертывания для AquaStream
# Используется поверх основного файла docker-compose.yml
# Добавляет канареечные версии микросервисов и настройки для распределения трафика

services:
  # Канареечная версия API-шлюза
  api-gateway-canary:
    image: ${REGISTRY:-}aquastream-api-gateway:${CANARY_VERSION:-canary}
    container_name: aquastream-api-canary
    environment:
      - SPRING_PROFILES_ACTIVE=canary,docker
      - CANARY_TRAFFIC_PERCENT=${CANARY_TRAFFIC_PERCENT:-10}
    ports:
      - "8090:8080"
    depends_on:
      - user-service
      - crew-service
      - notification-service
      - planning-service
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Канареечная версия сервиса пользователей
  user-service-canary:
    image: ${REGISTRY:-}aquastream-user-service:${CANARY_VERSION:-canary}
    container_name: aquastream-user-canary
    environment:
      - SPRING_PROFILES_ACTIVE=canary,docker
      - SERVER_PORT=8081
    ports:
      - "8091:8081"
    depends_on:
      - postgres
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/user/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Канареечная версия сервиса экипажа
  crew-service-canary:
    image: ${REGISTRY:-}aquastream-crew-service:${CANARY_VERSION:-canary}
    container_name: aquastream-crew-canary
    environment:
      - SPRING_PROFILES_ACTIVE=canary,docker
      - SERVER_PORT=8083
    ports:
      - "8093:8083"
    depends_on:
      - postgres
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/crew/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx-прокси для распределения трафика между основной и канареечной версиями
  traffic-manager:
    image: nginx:1.25-alpine
    container_name: aquastream-traffic-manager
    ports:
      - "80:80"
    volumes:
      - ../config/canary/nginx.conf:/etc/nginx/nginx.conf
      - ../config/canary/templates:/etc/nginx/templates
    environment:
      - CANARY_TRAFFIC_PERCENT=${CANARY_TRAFFIC_PERCENT:-10}
      - STABLE_SERVICE_HOST=api-gateway
      - STABLE_SERVICE_PORT=8080
      - CANARY_SERVICE_HOST=api-gateway-canary
      - CANARY_SERVICE_PORT=8080
    depends_on:
      - api-gateway
      - api-gateway-canary
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  # Grafana дашборд для мониторинга канареечного развертывания
  grafana-canary:
    image: grafana/grafana:10.2.0
    container_name: aquastream-grafana-canary
    ports:
      - "3002:3000"
    volumes:
      - ../config/canary/grafana/provisioning:/etc/grafana/provisioning
      - ../config/canary/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    networks:
      - aquastream-network
    restart: always

networks:
  aquastream-network:
    external: true 