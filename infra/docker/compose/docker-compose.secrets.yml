# Docker Compose с поддержкой Docker Secrets (Production)
# Использовать вместо docker-compose.full.yml для production deployment
version: "3.9"
name: aquastream

# ===================== SECRETS CONFIGURATION =====================
secrets:
  postgres_password:
    external: true
    name: aquastream_postgres_password
  grafana_password:
    external: true  
    name: aquastream_grafana_password
  elastic_password:
    external: true
    name: aquastream_elastic_password
  kibana_password:
    external: true
    name: aquastream_kibana_password

# ---------------------------- anchors ----------------------------
# Health check configurations with improved timeouts and retries
x-hc-fast:   &hc-fast   { interval: 15s, timeout: 5s,  retries: 3,  start_period: 30s }   # For lightweight services
x-hc-normal: &hc-normal { interval: 30s, timeout: 10s, retries: 5,  start_period: 60s }   # For standard services  
x-hc-slow:   &hc-slow   { interval: 45s, timeout: 15s, retries: 8,  start_period: 120s }  # For heavy services (DB, ES)
x-hc-init:   &hc-init   { interval: 5s,  timeout: 10s, retries: 60, start_period: 10s }   # For init containers

x-log: &log-env
  LOGSTASH_HOST: ${LOGSTASH_HOST}
  LOGSTASH_PORT: ${LOGSTASH_PORT}

# ресурсные лимиты (оптимизированы для небольшой нагрузки)
x-limit-micro:  &limit-micro  { cpus: "${CPU_MICRO}",  memory: "${MEM_MICRO}" }
x-limit-tiny:   &limit-tiny   { cpus: "${CPU_TINY}",   memory: "${MEM_TINY}" }
x-limit-small:  &limit-small  { cpus: "${CPU_SMALL}",  memory: "${MEM_SMALL}" }
x-limit-medium: &limit-medium { cpus: "${CPU_MEDIUM}", memory: "${MEM_MEDIUM}" }
x-limit-big:    &limit-big    { cpus: "${CPU_BIG}",    memory: "${MEM_BIG}" }

# Наследуем сети и volumes из основного compose файла
networks:
  public-network:
    driver: bridge
  api-network:
    driver: bridge
  infra-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
  elasticsearch_certs:
  zookeeper_data:
  kafka_data:
  nginx_logs:
  prometheus_data:
  alertmanager_data:

services:
  # ================ КРИТИЧНЫЕ СЕРВИСЫ С SECRETS ================ 
  postgres:
    image: postgres:${POSTGRES_TAG}
    restart: unless-stopped
    ports: [ "${POSTGRES_PORT}:5432" ]
    environment:
      POSTGRES_DB: aquastream_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [ infra-network, api-network ]
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres -d aquastream_db"]
      <<: *hc-slow
    deploy: { resources: { limits: *limit-medium } }
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    user: "postgres:postgres"
    shm_size: 128mb

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_TAG}
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200
      ELASTIC_PASSWORD_FILE: /run/secrets/elastic_password
      xpack.security.enabled: "true"
      xpack.security.http.ssl.enabled: "true"
      xpack.security.http.ssl.key: certs/elasticsearch/elasticsearch.key
      xpack.security.http.ssl.certificate: certs/elasticsearch/elasticsearch.crt
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.enabled: "true"
      xpack.security.transport.ssl.key: certs/elasticsearch/elasticsearch.key
      xpack.security.transport.ssl.certificate: certs/elasticsearch/elasticsearch.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.license.self_generated.type: basic
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
    networks:
      - infra-network
      - monitoring-network
    secrets:
      - elastic_password
    depends_on:
      elasticsearch-setup: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL","curl -s --cacert config/certs/ca/ca.crt -u elastic:$(cat /run/secrets/elastic_password) https://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"' || exit 1"]
      <<: *hc-slow
    deploy: { resources: { limits: *limit-big } }
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  # Init Elasticsearch users с secrets
  elasticsearch-init:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_TAG}
    volumes: [ elasticsearch_certs:/usr/share/elasticsearch/config/certs ]
    networks: [ infra-network ]
    secrets:
      - elastic_password
      - kibana_password
    depends_on:
      elasticsearch: { condition: service_healthy }
    security_opt:
      - no-new-privileges:true
    command: >
      bash -c '
        echo "Waiting for Elasticsearch to be ready...";
        ELASTIC_PASS=$$(cat /run/secrets/elastic_password);
        KIBANA_PASS=$$(cat /run/secrets/kibana_password);
        until curl -s --cacert config/certs/ca/ca.crt -u elastic:$$ELASTIC_PASS https://elasticsearch:9200/_cluster/health | grep -q "green\|yellow"; do
          sleep 1;
        done;
        echo "Setting kibana_system password";
        until curl -s --cacert config/certs/ca/ca.crt -u elastic:$$ELASTIC_PASS -X POST https://elasticsearch:9200/_security/user/kibana_system/_password -H "Content-Type: application/json" -d "{\"password\":\"$$KIBANA_PASS\"}" | grep -q "^{}"; do 
          sleep 2; 
        done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -u elastic:$(cat /run/secrets/elastic_password) https://elasticsearch:9200/_security/user/kibana_system | grep -q 'kibana_system'"]
      <<: *hc-init

  kibana:
    image: docker.elastic.co/kibana/kibana:${KIBANA_TAG}
    restart: unless-stopped
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD_FILE: /run/secrets/kibana_password
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_CERTIFICATE: config/certs/kibana/kibana.crt
      SERVER_SSL_KEY: config/certs/kibana/kibana.key
    volumes:
      - elasticsearch_certs:/usr/share/kibana/config/certs:ro
    networks: [ monitoring-network ]
    secrets:
      - kibana_password
    depends_on:
      elasticsearch: { condition: service_healthy }
      elasticsearch-init: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL","curl -s --cacert config/certs/ca/ca.crt https://localhost:5601/api/status | grep -q '\"state\":\"green\"' || exit 1"]
      <<: *hc-normal
    deploy: { resources: { limits: *limit-small } }
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    user: "1000:1000"

  logstash:
    image: docker.elastic.co/logstash/logstash:${LOGSTASH_TAG}
    restart: unless-stopped
    volumes:
      - ../../monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ../../monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - elasticsearch_certs:/usr/share/logstash/config/certs:ro
    expose: ["5000", "9600"]
    environment:
      LS_JAVA_OPTS: -Xms128m -Xmx128m
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD_FILE: /run/secrets/elastic_password
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: /usr/share/logstash/config/certs/ca/ca.crt
    networks:
      - infra-network
      - monitoring-network
      - api-network
    secrets:
      - elastic_password
    depends_on: { elasticsearch: { condition: service_healthy } }
    healthcheck:
      test: ["CMD-SHELL","curl -s http://localhost:9600 | grep -q '\"status\":\"green\"' || exit 1"]
      <<: *hc-normal
    deploy: { resources: { limits: *limit-small } }
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    user: "1000:1000"

  grafana:
    image: grafana/grafana:${GRAFANA_TAG}
    restart: unless-stopped
    volumes:
      - ../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ../../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
    networks: [ monitoring-network ]
    secrets:
      - grafana_password
    depends_on:
      - prometheus
      - alertmanager
    healthcheck:
      test: ["CMD-SHELL","wget --quiet --tries=1 --spider http://localhost:3000/ || exit 1"]
      <<: *hc-normal
    deploy: { resources: { limits: *limit-small } }
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    user: "472:472"

  # ================ СЕРВИСЫ С ПЕРЕМЕННЫМИ ОКРУЖЕНИЯ ================
  # Все микросервисы получают пароль PostgreSQL через secrets
  user-service:
    build:
      context: ../../..
      dockerfile: infra/docker/images/Dockerfile.backend-user
      args:
        ECLIPSE_TEMURIN_JDK_TAG: ${ECLIPSE_TEMURIN_JDK_TAG}
        ECLIPSE_TEMURIN_JRE_TAG: ${ECLIPSE_TEMURIN_JRE_TAG}
    image: aquastream-user:latest
    restart: unless-stopped
    expose: ['8081']
    environment:
      <<: *log-env
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/aquastream_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD_FILE: /run/secrets/postgres_password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks: [ api-network ]
    secrets:
      - postgres_password
    depends_on:
      postgres:  { condition: service_healthy }
      kafka:     { condition: service_healthy }
      logstash:  { condition: service_healthy }
    healthcheck:
      test: ['CMD','curl','-fs','http://localhost:8081/actuator/health']
      <<: *hc-fast
    deploy: { resources: { limits: *limit-tiny } }
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    read_only: true

  # Наследуем остальные сервисы из базового compose...
  # (nginx, zookeeper, kafka, prometheus, alertmanager, etc.)
  # Добавляем только те сервисы, которые используют secrets