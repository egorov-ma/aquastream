version: '3.8'

services:
  api-gateway:
    container_name: aquastream-api
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.backend-api
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - planning-service
      - crew-service
      - notification-service
    networks:
      - aquastream-network
    image: aquastream-api:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    container_name: aquastream-user
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.backend-user
    ports:
      - "8081:8081"
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aquastream_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    networks:
      - aquastream-network
    image: aquastream-user:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  planning-service:
    container_name: aquastream-planning
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.backend-planning
    ports:
      - "8082:8082"
      - "9090:9090"
    networks:
      - aquastream-network

  crew-service:
    container_name: aquastream-crew
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.backend-crew
    ports:
      - "8083:8083"
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aquastream_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    networks:
      - aquastream-network

  notification-service:
    container_name: aquastream-notification
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.backend-notification
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aquastream_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - aquastream-network

  postgres:
    container_name: aquastream-postgres
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=aquastream_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    container_name: aquastream-kafka
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - aquastream-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    container_name: aquastream-zookeeper
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - aquastream-network

  frontend:
    container_name: aquastream-frontend
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.frontend
    ports:
      - "3000:80"
    networks:
      - aquastream-network

networks:
  aquastream-network:
    driver: bridge

volumes:
  postgres_data: