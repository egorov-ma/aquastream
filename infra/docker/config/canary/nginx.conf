user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" '
                      'urt="$upstream_response_time" cache="$upstream_cache_status" '
                      'served_by="$upstream_addr" canary_request="$canary_request"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # Переменная для определения, должен ли запрос идти на канареечную версию
    # Значение env-переменной CANARY_TRAFFIC_PERCENT определяет процент трафика (от 0 до 100)
    map $remote_addr$http_user_agent$time_local $canary_request {
        default "${CANARY_TRAFFIC_PERCENT:-10}";
    }

    # Выбор апстрима на основе случайного значения и процента трафика на канареечную версию
    split_clients "${canary_request}${remote_addr}${http_user_agent}${time_local}" $upstream_variant {
        ${CANARY_TRAFFIC_PERCENT:-10}%    canary;
        *                                  stable;
    }

    # Метрики для Prometheus
    server {
        listen 8081;
        server_name localhost;

        location /metrics {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }

    # Основной сервер
    server {
        listen 80;
        server_name localhost;

        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'OK';
        }

        # Проксирование запросов в зависимости от выбранной версии
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Добавляем заголовок для маркирования, какая версия обрабатывает запрос
            proxy_set_header X-Deployment-Version $upstream_variant;
            
            # Логика выбора апстрима
            if ($upstream_variant = "canary") {
                proxy_pass http://${CANARY_SERVICE_HOST}:${CANARY_SERVICE_PORT};
            }
            
            # Стабильная версия по умолчанию
            proxy_pass http://${STABLE_SERVICE_HOST}:${STABLE_SERVICE_PORT};
            
            # Таймауты
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Эндпоинт для простого переключения процента трафика
        location /canary/config {
            allow 127.0.0.1;
            deny all;
            
            content_by_lua_block {
                local percent = ngx.var.arg_percent
                if percent then
                    os.execute("export CANARY_TRAFFIC_PERCENT=" .. percent)
                    ngx.say("Canary traffic percent set to: " .. percent .. "%")
                else
                    ngx.say("Current canary traffic percent: ${CANARY_TRAFFIC_PERCENT:-10}%")
                end
            }
        }
    }
} 