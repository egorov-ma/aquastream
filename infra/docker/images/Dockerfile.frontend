# 1. Используем официальный образ Node.js для сборки фронтенда
FROM node:20-slim AS build

WORKDIR /app

# Устанавливаем переменную окружения для пропуска хуков Husky
ENV HUSKY=0
ENV NPM_CONFIG_IGNORE_SCRIPTS=true

# Копируем только необходимые файлы для установки зависимостей
COPY frontend/package.json frontend/package-lock.json ./

# Устанавливаем все зависимости
RUN npm install --omit=dev --no-optional && \
    # Очищаем кэш npm для уменьшения размера образа
    npm cache clean --force

# Копируем конфигурационные файлы
COPY frontend/tsconfig.json frontend/tsconfig.node.json ./
COPY frontend/vite.config.ts ./
COPY frontend/.eslintrc.json frontend/.prettierrc ./

# Создаем пустой файл .env с переменными окружения для production
RUN echo "VITE_API_URL=http://localhost:8080/api" > .env && \
    echo "VITE_APP_VERSION=1.0.0" >> .env

# Копируем публичные ресурсы и код приложения
COPY frontend/public ./public
COPY frontend/index.html ./
COPY frontend/src ./src

# Устанавливаем dev-зависимости для сборки
RUN npm install --no-save terser vite typescript @vitejs/plugin-react

# Собираем фронтенд
RUN npm run build

# 2. Используем легковесный образ Nginx для раздачи фронтенда с brotli модулем
FROM nginx:alpine AS runtime

# Устанавливаем необходимые пакеты для сборки brotli модуля
RUN apk add --no-cache git build-base pcre-dev openssl-dev zlib-dev linux-headers openssl

# Создаем директорию для сборки модуля
WORKDIR /build

# Клонируем исходники Nginx brotli модуля
RUN git clone --recursive https://github.com/google/ngx_brotli.git

# Получаем исходники nginx той же версии, что и установленный
RUN nginx_version=$(nginx -v 2>&1 | sed -r 's/^nginx version: nginx\/([0-9]+\.[0-9]+\.[0-9]+).*/\1/') && \
    wget "http://nginx.org/download/nginx-${nginx_version}.tar.gz" && \
    tar -xzvf "nginx-${nginx_version}.tar.gz" && \
    cd "nginx-${nginx_version}" && \
    ./configure --with-compat --add-dynamic-module=../ngx_brotli && \
    make modules

# Копируем собранный модуль в директорию модулей Nginx
RUN mkdir -p /usr/lib/nginx/modules/ && \
    cp /build/nginx-*/objs/ngx_http_brotli_filter_module.so /usr/lib/nginx/modules/ && \
    cp /build/nginx-*/objs/ngx_http_brotli_static_module.so /usr/lib/nginx/modules/

# Создаем директорию для SSL и генерируем параметры Diffie-Hellman
RUN mkdir -p /etc/nginx/ssl && \
    openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

# Очищаем build директорию для уменьшения размера образа
RUN rm -rf /build

# Создаем каталог для модулей и создаем конфигурацию для загрузки модуля
RUN mkdir -p /etc/nginx/modules/ && \
    echo 'load_module /usr/lib/nginx/modules/ngx_http_brotli_filter_module.so;' > /etc/nginx/modules/brotli.conf && \
    echo 'load_module /usr/lib/nginx/modules/ngx_http_brotli_static_module.so;' >> /etc/nginx/modules/brotli.conf

# Удаляем дефолтные конфиги Nginx
RUN rm -rf /etc/nginx/conf.d

# Копируем конфиг Nginx из репозитория
COPY frontend/nginx.conf /etc/nginx/nginx.conf

# Копируем только собранный фронтенд в Nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Создаем директорию для изображений
RUN mkdir -p /usr/share/nginx/html/img

# Создаем скрипт для замены API URL в runtime
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'set -e' >> /docker-entrypoint.sh && \
    echo 'if [ -n "$API_URL" ]; then' >> /docker-entrypoint.sh && \
    echo '  sed -i "s|set \$api_url \"http://host.docker.internal:8080/\";|set \$api_url \"$API_URL\";|g" /etc/nginx/nginx.conf' >> /docker-entrypoint.sh && \
    echo 'fi' >> /docker-entrypoint.sh && \
    echo 'exec "$@"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Открываем порт
EXPOSE 80

# Запускаем Nginx с энтрипоинтом для замены переменных окружения
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]