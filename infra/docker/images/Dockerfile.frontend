# Global ARGs for multi-stage build
ARG NODE_TAG=20.11.1-slim
ARG NGINX_TAG=1.25.4-bookworm

# --- Stage 1: build frontend ----------------------
FROM node:${NODE_TAG} AS build

WORKDIR /app

# Устанавливаем переменную окружения для пропуска хуков Husky
ENV HUSKY=0
ENV NPM_CONFIG_IGNORE_SCRIPTS=true

# Копируем только необходимые файлы для установки зависимостей
COPY frontend/package.json frontend/package-lock.json ./

# Устанавливаем все зависимости
RUN npm install --no-optional && \
    # Очищаем кэш npm для уменьшения размера образа
    npm cache clean --force

# Копируем конфигурационные файлы
COPY frontend/tsconfig.json frontend/tsconfig.node.json ./
COPY frontend/vite.config.ts ./
COPY frontend/postcss.config.cjs ./
COPY frontend/tailwind.config.js ./
COPY frontend/eslint.config.js frontend/.prettierrc ./

# Создаем пустой файл .env с переменными окружения для production
# Используем относительный путь, чтобы запросы шли через сам фронтенд-домен (Nginx)
RUN echo "VITE_API_URL=/api" > .env && \
    echo "VITE_APP_VERSION=1.0.0" >> .env

# Копируем публичные ресурсы и код приложения
COPY frontend/public ./public
COPY frontend/index.html ./
COPY frontend/src ./src
# Добавляем копирование скриптов сборки и разработки
COPY frontend/scripts ./scripts

# Устанавливаем dev-зависимости для сборки
RUN npm install --no-save terser@5.27.0 vite@5.1.4 typescript@5.3.3 @vitejs/plugin-react@4.2.1

# Собираем фронтенд
RUN npm run build && \
    # Очищаем dev зависимости после сборки
    npm cache clean --force

# --- Stage 2: runtime -----------------------------
FROM nginx:${NGINX_TAG} AS runtime

# Устанавливаем необходимые пакеты
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssl \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /etc/nginx/ssl \
    && openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 \
    && openssl req -x509 -nodes -days 365 -subj "/CN=localhost" -newkey rsa:2048 -keyout /etc/nginx/ssl/key.pem -out /etc/nginx/ssl/cert.pem

# Удаляем дефолтные конфиги Nginx
RUN rm -rf /etc/nginx/conf.d

# Копируем конфиг Nginx из репозитория
COPY frontend/nginx.conf /etc/nginx/nginx.conf

# Копируем только собранный фронтенд в Nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Создаем директорию для изображений
RUN mkdir -p /usr/share/nginx/html/img

# Создаем скрипт для замены API URL в runtime
RUN echo "#!/bin/sh" > /docker-entrypoint.sh && \
    echo "set -e" >> /docker-entrypoint.sh && \
    echo "if [ -n \"\$API_URL\" ]; then" >> /docker-entrypoint.sh && \
    echo "  sed -i \"s|set \\\$api_url \\\"http://api-gateway:8080/api/\\\";|set \\\$api_url \\\"\$API_URL\\\";|g\" /etc/nginx/nginx.conf" >> /docker-entrypoint.sh && \
    echo "fi" >> /docker-entrypoint.sh && \
    echo "exec \"\$@\"" >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Запускаем Nginx с энтрипоинтом для замены переменных окружения
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]