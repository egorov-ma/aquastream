input {
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # Beats input для структурированных логов
  beats {
    port => 5044
  }
}

filter {
  # Добавляем общие поля для всех логов
  mutate {
    add_field => {
      "environment" => "${ENV:development}"
      "cluster" => "aquastream"
    }
  }
  
  # Безопасность: удаляем чувствительные данные
  mutate {
    # Удаляем пароли, токены и ключи
    gsub => [
      "message", "(?i)(password|passwd|pwd)=[^\s&]+", "password=***СКРЫТО***",
      "message", "(?i)(authorization|auth|bearer|token|jwt)\s*[:=]\s*[^\s&]+", "authorization=***СКРЫТО***",
      "message", "(?i)(secret|key|api[_-]?key)\s*[:=]\s*[^\s&]+", "secret=***СКРЫТО***",
      "message", "(?i)(credit[_-]?card|cc[_-]?number)\s*[:=]\s*[\d\-\s]+", "credit_card=***СКРЫТО***",
      "message", "(?i)(ssn|social[_-]?security)\s*[:=]\s*[\d\-]+", "ssn=***СКРЫТО***",
      "message", "(?i)(email)\s*[:=]\s*[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", "email=***СКРЫТО***"
    ]
  }
  
  # Парсинг логов Spring Boot
  if [type] == "spring-boot-logger" or "spring" in [tags] {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:severity}\s+\[%{DATA:service},%{DATA:trace},%{DATA:span},%{DATA:exportable}\]\s+%{DATA:pid}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:class}\s+:\s+%{GREEDYDATA:log_message}" }
    }
    
    if "_grokparsefailure" not in [tags] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
      mutate {
        remove_field => ["timestamp"]
        replace => { "message" => "%{log_message}" }
        remove_field => ["log_message"]
      }
    }
  }
  
  # Парсинг логов Nginx
  if "nginx" in [tags] {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    
    # Безопасность: обнаружение подозрительной активности
    if [response] and [response] >= 400 {
      mutate {
        add_tag => [ "security_alert", "http_error" ]
      }
    }
    
    # Обнаружение попыток SQL-инъекций
    if [request] =~ /(?i)(union|select|insert|update|delete|drop|create|alter|exec|script)/ {
      mutate {
        add_tag => [ "security_alert", "sql_injection_attempt" ]
      }
    }
    
    # Обнаружение попыток XSS
    if [request] =~ /(?i)(<script|javascript:|onload=|onerror=|alert\(|document\.)/ {
      mutate {
        add_tag => [ "security_alert", "xss_attempt" ]
      }
    }
  }
  
  # Парсинг специфичных логов приложения
  if [service] {
    mutate {
      add_field => { "log_source" => "microservice" }
    }
  }
  
  # Безопасность: отмечаем логи высокой важности
  if [severity] == "ERROR" or [severity] == "FATAL" {
    mutate {
      add_tag => [ "high_severity" ]
    }
  }
  
  # Безопасность: отмечаем события аутентификации
  if [message] =~ /(?i)(login|logout|authentication|authorization|failed|success|denied|granted)/ {
    mutate {
      add_tag => [ "auth_event" ]
    }
  }
  
  # Безопасность: отмечаем события БД
  if [message] =~ /(?i)(database|sql|query|connection|transaction)/ {
    mutate {
      add_tag => [ "database_event" ]
    }
  }
  
  # Добавляем геолокацию для внешних IP (если есть clientip)
  if [clientip] and [clientip] !~ /^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.|127\.)/ {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }
}

output {
  # Основные логи приложения
  if "security_alert" not in [tags] {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTICSEARCH_PASSWORD}"
      cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
      ssl => true
      ssl_certificate_verification => true
      index => "aquastream-logs-%{+YYYY.MM.dd}"
      template_name => "aquastream-logs"
      template_pattern => "aquastream-logs-*"
      template => {
        "index_patterns" => ["aquastream-logs-*"],
        "settings" => {
          "number_of_shards" => 1,
          "number_of_replicas" => 0,
          "index.lifecycle.name" => "aquastream-log-policy",
          "index.lifecycle.rollover_alias" => "aquastream-logs"
        },
        "mappings" => {
          "properties" => {
            "@timestamp" => { "type" => "date" },
            "severity" => { "type" => "keyword" },
            "service" => { "type" => "keyword" },
            "message" => { "type" => "text", "analyzer" => "standard" },
            "tags" => { "type" => "keyword" }
          }
        }
      }
      codec => json
    }
  }
  
  # Алерты безопасности в отдельный индекс с длительным хранением
  if "security_alert" in [tags] {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTICSEARCH_PASSWORD}"
      cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
      ssl => true
      ssl_certificate_verification => true
      index => "aquastream-security-%{+YYYY.MM.dd}"
      template_name => "aquastream-security"
      template_pattern => "aquastream-security-*"
      template => {
        "index_patterns" => ["aquastream-security-*"],
        "settings" => {
          "number_of_shards" => 1,
          "number_of_replicas" => 1,
          "index.lifecycle.name" => "aquastream-security-policy",
          "index.lifecycle.rollover_alias" => "aquastream-security"
        }
      }
      codec => json
    }
    
    # Также отправляем критические алерты в syslog (опционально)
    # syslog {
    #   host => "siem.company.com"
    #   port => 514
    #   facility => "local0"
    #   severity => "warning"
    # }
  }
  
  # Отладочный вывод (только для разработки)
  if "${ENV:development}" == "development" {
    stdout {
      codec => rubydebug
    }
  }
} 