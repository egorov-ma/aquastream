#!/bin/bash
set -euo pipefail
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_DIR="${PROJECT_ROOT}/infra/scripts"

# –¶–≤–µ—Ç–∞
NC="\033[0m"; GREEN="\033[0;32m"; YELLOW="\033[0;33m"; RED="\033[0;31m"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏
log() {
    local level="$1"; shift
    # –£–¥–∞–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    level="${level//[\[\]]/}"
    local msg="$*"
    local color="$GREEN"
    case "$level" in
      INFO)  color="$GREEN";;
      WARN)  color="$YELLOW";;
      ERROR) color="$RED";;
    esac
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${color}${level}${NC} ${msg}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log ERROR "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker compose version &> /dev/null; then
        log ERROR "–ü–ª–∞–≥–∏–Ω Docker Compose (docker compose) –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ Docker –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏."
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
    check_docker_daemon_ready
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Docker daemon
check_docker_daemon_ready() {
    local max_attempts=10
    local attempt=1
    local delay=2
    
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker daemon..."
    
    while [ $attempt -le $max_attempts ]; do
        if docker info &>/dev/null; then
            log INFO "Docker daemon –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            check_docker_resources
            return 0
        fi
        
        log WARN "Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts), –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}s..."
        sleep $delay
        attempt=$((attempt + 1))
        delay=$((delay + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    done
    
    log ERROR "Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫!"
    log ERROR "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 'sudo systemctl start docker' (Linux) –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker
check_docker_resources() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
    local total_memory
    if command -v docker system info &>/dev/null; then
        total_memory=$(docker system info --format '{{.MemTotal}}' 2>/dev/null || echo "0")
        if [ "$total_memory" -gt 0 ] && [ "$total_memory" -lt 5368709120 ]; then  # 5GB –≤ –±–∞–π—Ç–∞—Ö
            log WARN "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å –≤ Docker: $(numfmt --to=iec $total_memory). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5GB"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–π Docker
    if ! docker network ls &>/dev/null; then
        log WARN "–ü—Ä–æ–±–ª–µ–º—ã —Å Docker —Å–µ—Ç—è–º–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å volume driver
    if ! docker volume ls &>/dev/null; then
        log WARN "–ü—Ä–æ–±–ª–µ–º—ã —Å Docker volumes, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log "[INFO] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    if [ -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ]; then
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" down -v --remove-orphans
    else
        log "[ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ZooKeeper (–µ—Å–ª–∏ volume —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    ZOOKEEPER_VOLUME=$(docker volume ls -q | grep zookeeper | head -n1 || true)
    if [ -n "$ZOOKEEPER_VOLUME" ]; then
        MNT=$(docker volume inspect "$ZOOKEEPER_VOLUME" -f '{{ .Mountpoint }}')
        if [ -d "$MNT/version-2" ]; then
            log INFO "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ZooKeeper –≤ $MNT..."
            rm -rf "$MNT/version-2"/*
            log INFO "–î–∞–Ω–Ω—ã–µ ZooKeeper –æ—á–∏—â–µ–Ω—ã"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    log "[INFO] –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    stop_containers
    log "[INFO] –ó–∞–ø—É—Å–∫–∞–µ–º docker compose..."

    local compose_file="$PROJECT_ROOT/infra/docker/compose/docker-compose.yml"
    if [ -f "$compose_file" ]; then
        # –¢—è–Ω–µ–º –æ–±—Ä–∞–∑—ã –±–µ–∑ —Å–µ–∫—Ü–∏–∏ build
        docker compose -f "$compose_file" pull --quiet --ignore-buildable 2>/dev/null || true
        # –°–æ–±–∏—Ä–∞–µ–º build-–æ–±—Ä–∞–∑–∞
        docker compose -f "$compose_file" build --quiet
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        docker compose -f "$compose_file" up -d
        wait_healthy 180
    else
        log "[ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
wait_healthy() {
    local max_wait=${1:-180}
    local elapsed=0
    local check_interval=10
    local previous_status=""
    
    log INFO "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–¥–æ ${max_wait}s)..."
    
    while [ $elapsed -lt $max_wait ]; do
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ jq –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        local status_info
        status_info=$(docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ps --format "table {{.Name}}\t{{.Status}}\t{{.Health}}" 2>/dev/null || true)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        local total_containers running_containers healthy_containers
        total_containers=$(echo "$status_info" | tail -n +2 | wc -l)
        running_containers=$(echo "$status_info" | grep -c "Up " || echo "0")
        healthy_containers=$(echo "$status_info" | grep -c "healthy" || echo "0")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        local current_status="$running_containers/$total_containers running, $healthy_containers healthy"
        if [ "$current_status" != "$previous_status" ]; then
            log INFO "–ü—Ä–æ–≥—Ä–µ—Å—Å: $current_status"
            previous_status="$current_status"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if [ "$running_containers" -eq "$total_containers" ] && [ "$healthy_containers" -eq "$total_containers" ]; then
            log INFO "‚úÖ –í—Å–µ $total_containers –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!"
            show_service_endpoints
            return 0
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ failed –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        local failed_containers
        failed_containers=$(echo "$status_info" | grep -E "(Exited|Dead)" | cut -f1 || true)
        if [ -n "$failed_containers" ]; then
            log ERROR "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $failed_containers"
            log ERROR "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './run.sh logs' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            return 1
        fi
        
        sleep $check_interval
        elapsed=$((elapsed + check_interval))
    done
    
    # –¢–∞–π–º–∞—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log WARN "‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ ${max_wait}s"
    log INFO "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    echo "$status_info"
    
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
show_service_endpoints() {
    log INFO "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  ‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:      https://localhost/"
    echo "  ‚Ä¢ API:                 https://localhost/api/"
    echo "  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:          https://localhost/monitoring/ (admin:monitoring123)"
    echo "  ‚Ä¢ Health Check:        https://localhost/health"
    echo ""
    echo "  –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø):"
    echo "  ‚Ä¢ PostgreSQL:          localhost:5432"
    echo "  ‚Ä¢ Kafka:               localhost:19092"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
validate_infrastructure() {
    log "[INFO] –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    local validation_script="$SCRIPT_DIR/validate-infrastructure.sh"
    
    if [ -f "$validation_script" ]; then
        bash "$validation_script" "$@"
    else
        log "[ERROR] –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $validation_script"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log "[INFO] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    local test_script="$SCRIPT_DIR/run-tests.sh"
    
    if [ -f "$test_script" ]; then
        bash "$test_script" "$@"
    else
        log "[ERROR] –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $test_script"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
run_backup() {
    log INFO "–ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è..."
    local backup_script="$SCRIPT_DIR/backup-restore.sh"
    
    if [ -f "$backup_script" ]; then
        bash "$backup_script" backup "$@"
    else
        log ERROR "–°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_script"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
run_restore() {
    log INFO "–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
    local backup_script="$SCRIPT_DIR/backup-restore.sh"
    
    if [ -f "$backup_script" ]; then
        if [ -z "${1:-}" ]; then
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup'–æ–≤
            bash "$backup_script" list
            echo
            read -p "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É backup'–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (YYYYMMDD_HHMMSS): " backup_date
            if [ -n "$backup_date" ]; then
                bash "$backup_script" restore "$backup_date"
            else
                log WARN "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            fi
        else
            bash "$backup_script" restore "$@"
        fi
    else
        log ERROR "–°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_script"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è
generate_password() {
    local length=${1:-32}
    if command -v openssl >/dev/null 2>&1; then
        openssl rand -base64 $((length * 3 / 4)) | tr -d "=+/" | cut -c1-${length}
    elif command -v python3 >/dev/null 2>&1; then
        python3 -c "import secrets, string; print(''.join(secrets.choice(string.ascii_letters + string.digits + '@#%^&*') for _ in range(${length})))"
    else
        log ERROR "–ù–µ –Ω–∞–π–¥–µ–Ω openssl –∏–ª–∏ python3 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"
        exit 1
    fi
}


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
generate_passwords() {
    log INFO "========== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª—è AquaStream =========="
    
    local env_file="$PROJECT_ROOT/infra/docker/compose/.env"
    if [[ ! -f "$env_file" ]]; then
        log ERROR "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
        log INFO "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
        exit 1
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
    local postgres_pass=$(generate_password 24)
    local grafana_pass=$(generate_password 20)
    local elastic_pass=$(generate_password 28)
    local kibana_pass=$(generate_password 24)
    
    log INFO "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    log INFO "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    cp "$env_file" "${env_file}.backup.$(date +%Y%m%d-%H%M%S)"
    
    sed -i.tmp \
        -e "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${postgres_pass}/" \
        -e "s/^GRAFANA_ADMIN_PASSWORD=.*/GRAFANA_ADMIN_PASSWORD=${grafana_pass}/" \
        -e "s/^ELASTIC_PASSWORD=.*/ELASTIC_PASSWORD=${elastic_pass}/" \
        -e "s/^KIBANA_PASSWORD=.*/KIBANA_PASSWORD=${kibana_pass}/" \
        "$env_file"
    
    rm -f "${env_file}.tmp"
    log INFO "–§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ .gitignore
    local gitignore_file="$PROJECT_ROOT/.gitignore"
    if [[ -f "$gitignore_file" ]] && ! grep -q "secrets/" "$gitignore_file"; then
        echo "" >> "$gitignore_file"
        echo "# Security: Docker secrets and passwords" >> "$gitignore_file"
        echo "infra/docker/compose/secrets/" >> "$gitignore_file"
        echo "*.backup.*" >> "$gitignore_file"
        log INFO "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ .gitignore: secrets/ –∏ backup —Ñ–∞–π–ª—ã"
    fi
    
    echo
    log INFO "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:"
    echo "  PostgreSQL: ${postgres_pass}"
    echo "  Grafana:    ${grafana_pass}"
    echo "  Elastic:    ${elastic_pass}"
    echo "  Kibana:     ${kibana_pass}"
    echo
    log WARN "‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –ø–∞—Ä–æ–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
    log WARN "‚ö†Ô∏è  –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
check_password_strength() {
    local password="$1"
    local min_length=12
    
    if [[ ${#password} -lt $min_length ]]; then
        echo "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º $min_length —Å–∏–º–≤–æ–ª–æ–≤)"
        return 1
    fi
    
    local has_upper=false has_lower=false has_digit=false has_special=false
    if [[ "$password" =~ [A-Z] ]]; then has_upper=true; fi
    if [[ "$password" =~ [a-z] ]]; then has_lower=true; fi
    if [[ "$password" =~ [0-9] ]]; then has_digit=true; fi
    if [[ "$password" =~ [^A-Za-z0-9] ]]; then has_special=true; fi
    
    local score=0
    $has_upper && ((score++))
    $has_lower && ((score++))
    $has_digit && ((score++))
    $has_special && ((score++))
    
    if [[ $score -lt 3 ]]; then
        echo "–ü–∞—Ä–æ–ª—å —Å–ª–∞–±—ã–π. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 –∏–∑ 4: –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
input_password() {
    local service_name="$1"
    local password confirm_password
    
    while true; do
        read -s -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${service_name}: " password
        echo
        
        if ! check_password_strength "$password"; then
            log WARN "–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            continue
        fi
        
        read -s -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: " confirm_password
        echo
        
        if [[ "$password" != "$confirm_password" ]]; then
            log WARN "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            continue
        fi
        
        echo "$password"
        return 0
    done
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
update_passwords() {
    log INFO "========== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π AquaStream =========="
    
    local env_file="$PROJECT_ROOT/infra/docker/compose/.env"
    if [[ ! -f "$env_file" ]]; then
        log ERROR "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
        exit 1
    fi
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:"
    echo "1) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo "2) –í–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –≤—Ä—É—á–Ω—É—é"
    read -p "–í–∞—à –≤—ã–±–æ—Ä [1-2]: " choice
    
    case $choice in
        1)
            generate_passwords
            ;;
        2)
            log INFO "–í–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –≤—Ä—É—á–Ω—É—é..."
            cp "$env_file" "${env_file}.backup.$(date +%Y%m%d-%H%M%S)"
            
            local postgres_pass=$(input_password "PostgreSQL")
            local grafana_pass=$(input_password "Grafana Admin")
            local elastic_pass=$(input_password "Elasticsearch")
            local kibana_pass=$(input_password "Kibana")
            
            sed -i.tmp \
                -e "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${postgres_pass}/" \
                -e "s/^GRAFANA_ADMIN_PASSWORD=.*/GRAFANA_ADMIN_PASSWORD=${grafana_pass}/" \
                -e "s/^ELASTIC_PASSWORD=.*/ELASTIC_PASSWORD=${elastic_pass}/" \
                -e "s/^KIBANA_PASSWORD=.*/KIBANA_PASSWORD=${kibana_pass}/" \
                "$env_file"
            
            rm -f "${env_file}.tmp"
            log INFO "–ü–∞—Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ"
            ;;
        *)
            log ERROR "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
            ;;
    esac
    
    echo
    log WARN "‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Å–µ–π—á–∞—Å? [y/N]: " restart_services
    
    if [[ "${restart_services,,}" =~ ^(y|yes)$ ]]; then
        log INFO "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏..."
        stop_containers
        start_containers
        log INFO "–ü–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
    else
        log WARN "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: ./run.sh stop && ./run.sh start"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –ø–∞—Ä–æ–ª—è–º–∏  
run_security() {
    log INFO "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é..."
    local action="${1:-update}"
    
    case "$action" in
        "generate"|"gen")
            generate_passwords
            ;;
        "update"|"upd")
            update_passwords
            ;;
        *)
            log ERROR "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $action"
            log INFO "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: generate (gen), update (upd)"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
check_git_repo() {
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log ERROR "–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
        exit 1
    fi
    log INFO "‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ git hooks –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
setup_hooks_directory() {
    local git_dir
    git_dir=$(git rev-parse --git-dir)
    local custom_hooks_dir="$PROJECT_ROOT/.githooks"
    
    log INFO "üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git hooks –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    
    mkdir -p "$custom_hooks_dir"
    git config core.hooksPath "$custom_hooks_dir"
    
    log INFO "‚úÖ Git hooks –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: $custom_hooks_dir"
}

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_basic_tools() {
    local missing_tools=()
    
    if ! command -v docker >/dev/null 2>&1; then
        missing_tools+=("docker")
    fi
    
    if ! docker compose version >/dev/null 2>&1; then
        missing_tools+=("docker-compose")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log ERROR "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing_tools[*]}"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ pre-commit hook
create_precommit_hook() {
    local custom_hooks_dir="$PROJECT_ROOT/.githooks"
    local precommit_hook="$custom_hooks_dir/pre-commit"
    
    if [ -f "$precommit_hook" ]; then
        log INFO "‚úÖ Pre-commit hook —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        chmod +x "$precommit_hook"
        return 0
    fi
    
    log INFO "üîß –°–æ–∑–¥–∞–Ω–∏–µ pre-commit hook..."
    
    cat > "$precommit_hook" << 'EOF'
#!/bin/bash
# AquaStream pre-commit hook
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

set -e

echo "üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Docker —Ñ–∞–π–ª–∞—Ö
if git diff --cached --name-only | grep -qE '\.(yml|yaml|dockerfile|sh)$'; then
    echo "üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if [ -f "infra/scripts/validate-infrastructure.sh" ]; then
        bash infra/scripts/validate-infrastructure.sh --quick
    elif [ -f "run.sh" ]; then
        ./run.sh validate --quick
    else
        echo "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É"
    fi
fi

echo "‚úÖ Pre-commit –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
EOF
    
    chmod +x "$precommit_hook"
    log INFO "‚úÖ Pre-commit hook —Å–æ–∑–¥–∞–Ω: $precommit_hook"
}

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
run_setup_dev() {
    log INFO "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞..."
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    check_git_repo
    setup_hooks_directory
    create_precommit_hook
    check_basic_tools
    
    log INFO "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    log INFO "Git hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .githooks/"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
clean_docker() {
    local clean_type="${1:-basic}"
    
    log "[INFO] –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤ (—Ä–µ–∂–∏–º: $clean_type)..."
    
    case "$clean_type" in
        "basic")
            log "[INFO] –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ volumes..."
            stop_containers
            ;;
        "full")
            log "[INFO] –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, volumes, —Å–µ—Ç–∏..."
            stop_containers
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            local stopped_containers=$(docker ps -a -q -f status=exited || true)
            if [ -n "$stopped_containers" ]; then
                log "[INFO] –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
                docker rm $stopped_containers || true
            fi
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
            log "[INFO] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
            docker image prune -f || true
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
            log "[INFO] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes..."
            docker volume prune -f || true
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏
            log "[INFO] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π..."
            docker network prune -f || true
            ;;
        "deep")
            log "[WARN] –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: –í–°–ï Docker —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
            read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï Docker –¥–∞–Ω–Ω—ã–µ (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                stop_containers
                
                # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
                log "[INFO] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è docker system prune --all --volumes..."
                docker system prune --all --volumes -f || true
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                local all_containers=$(docker ps -a -q || true)
                if [ -n "$all_containers" ]; then
                    log "[INFO] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
                    docker rm -f $all_containers || true
                fi
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                local all_images=$(docker images -q || true)
                if [ -n "$all_images" ]; then
                    log "[INFO] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤..."
                    docker rmi -f $all_images || true
                fi
            else
                log "[INFO] –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                return 0
            fi
            ;;
        *)
            log "[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏: $clean_type"
            log "[INFO] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: basic, full, deep"
            exit 1
            ;;
    esac
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    log "[INFO] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Docker –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
    docker system df 2>/dev/null || log "[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Docker"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (backend, frontend, Docker images)
build_project() {
    local mode="summary"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
    if [[ "${1:-}" =~ ^(--full|-f)$ ]]; then
        mode="full"
    elif [[ -z "${1:-}" || "${1:-}" =~ ^(--summary|-s)$ ]]; then
        mode="summary"
    else
        log ERROR "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –±–∏–ª–¥–∞: $1"
        exit 1
    fi

    # ========================= Backend =========================
    log INFO "========== –°–±–æ—Ä–∫–∞ backend (${mode}) =========="
    if [ "$mode" = "full" ]; then
        ./gradlew clean build -x test || { log ERROR "Gradle build failed"; exit 1; }
    else
        backend_log=$(mktemp)
        ./gradlew clean build -x test --console=plain >"$backend_log" 2>&1
        if [ $? -eq 0 ]; then
            log INFO "Backend build SUCCESS"
        else
            log ERROR "Backend build FAILED. –ü–æ–ª–Ω—ã–π –ª–æ–≥: $backend_log"
            exit 1
        fi
    fi

    # ========================= Frontend =========================
    log INFO "========== –°–±–æ—Ä–∫–∞ frontend (${mode}) =========="
    if [ "$mode" = "full" ]; then
        (cd frontend && npm ci && npm run build) || { log ERROR "Frontend build failed"; exit 1; }
    else
        frontend_log=$(mktemp)
        (cd frontend && npm ci --silent && npm run build --silent) >"$frontend_log" 2>&1
        if [ $? -eq 0 ]; then
            log INFO "Frontend build SUCCESS"
        else
            log ERROR "Frontend build FAILED. –ü–æ–ª–Ω—ã–π –ª–æ–≥: $frontend_log"
            exit 1
        fi
    fi

    # ========================= Docker images =========================
    log INFO "========== Docker compose build (${mode}) =========="
    if [ "$mode" = "full" ]; then
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" build || { log ERROR "Docker build failed"; exit 1; }
    else
        docker_log=$(mktemp)
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" build --quiet >"$docker_log" 2>&1
        if [ $? -eq 0 ]; then
            log INFO "Docker images build SUCCESS"
        else
            log ERROR "Docker images build FAILED. –ü–æ–ª–Ω—ã–π –ª–æ–≥: $docker_log"
            exit 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    log "[INFO] –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
    if [ -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ]; then
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" logs -f
    else
        log "[ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
}

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ - —Ç–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
show_help() {
    echo "AquaStream Management Tool"
    echo "========================="
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞>"
    echo
    echo "üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  start         –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  stop          –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç" 
    echo "  build         –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  test          –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    echo "  logs          –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  status        –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo
    echo "üîß –†–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  setup-dev     –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑)"
    echo "  security      –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π"
    echo "  validate      –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "  backup        –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  clean         –û—á–∏—Å—Ç–∫–∞ Docker"
    echo
    echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "  –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: infra/docs/SCRIPTS_REFERENCE.md"
    echo "  –í—Å–µ –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: ./run.sh help-advanced"
    echo
    exit 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ü–∏–π –∫–æ–º–∞–Ω–¥
show_help_options() {
    echo "AquaStream Management Tool - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    echo "================================================"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
    echo
    echo "–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:"
    echo
    echo "  build [–æ–ø—Ü–∏–∏]         –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "    --full, -f          –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ —Å–±–æ—Ä–∫–∏"
    echo "    --summary, -s       –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo
    echo "  start                 –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "    ‚Ä¢ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "    ‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "    ‚Ä¢ –ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö health checks"
    echo
    echo "  stop                  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "    ‚Ä¢ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "    ‚Ä¢ –£–¥–∞–ª—è–µ—Ç volumes –∏ networks"
    echo "    ‚Ä¢ –û—á–∏—â–∞–µ—Ç ZooKeeper –¥–∞–Ω–Ω—ã–µ"
    echo
    echo "  validate [–æ–ø—Ü–∏–∏]      –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    echo "    --quick             –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    echo "    --docker-only       –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose –∏ Dockerfile"
    echo "    --security-only     –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    echo "    --help              –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    echo
    echo "  test [–æ–ø—Ü–∏–∏]          –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    echo "    --backend-only      –¢–æ–ª—å–∫–æ backend —Ç–µ—Å—Ç—ã (Gradle)"
    echo "    --frontend-only     –¢–æ–ª—å–∫–æ frontend —Ç–µ—Å—Ç—ã (npm test)"
    echo "    --integration-only  –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "    --infrastructure-only  –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    echo "    --no-report         –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
    echo
    echo "  clean [—Ç–∏–ø]           –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo "    basic               –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ volumes (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "    full                + —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ —Å–µ—Ç–µ–π"
    echo "    deep                –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö Docker –¥–∞–Ω–Ω—ã—Ö (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)"
    echo
    echo "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´:"
    echo
    echo "  backup [—Ç–∏–ø]          –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PostgreSQL, Elasticsearch, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "    ‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤—ã —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"
    echo "    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
    echo
    echo "  restore [—Ñ–∞–π–ª]        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup"
    echo "    ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
    echo "    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±—ç–∫–∞–ø–æ–≤"
    echo "    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
    echo
    echo "  security [–¥–µ–π—Å—Ç–≤–∏–µ]   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"
    echo "    generate, gen       –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π"
    echo "    update, upd         –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–æ–ª–µ–π"
    echo
    echo "  setup-dev [–æ–ø—Ü–∏—è]     –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–æ)"
    echo "    full                –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (hooks, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)"
    echo "    git-hooks, hooks    –¢–æ–ª—å–∫–æ Git hooks"
    echo "    check               –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    echo "    uninstall           –£–¥–∞–ª–µ–Ω–∏–µ Git hooks"
    echo
    echo "–°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´:"
    echo
    echo "  logs [service]        –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "    ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –≤—Å–µ –ª–æ–≥–∏"
    echo "    ‚Ä¢ –° –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–∏—Å–∞: –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
    echo
    echo "  status                –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo "    ‚Ä¢ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "    ‚Ä¢ Health check —Å—Ç–∞—Ç—É—Å"
    echo "    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo
    echo "–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:"
    echo
    echo "  # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  $0 build --full && $0 validate && $0 test && $0 start"
    echo
    echo "  # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"
    echo "  $0 backup && $0 stop && $0 build && $0 start"
    echo
    echo "  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"
    echo "  $0 status && $0 logs api-gateway"
    echo
    echo "  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  $0 clean deep && $0 build && $0 start"
    echo
    echo "  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  $0 setup-dev && $0 security generate && $0 build"
    echo
    exit 0
}


# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_ROOT" || { echo "–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${PROJECT_ROOT}"; exit 1; }

# –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ help, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
if [ $# -eq 0 ]; then
    show_help
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É help
if [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
elif [ "$1" = "help-advanced" ] || [ "$1" = "options" ]; then
    show_help_options
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
case "$1" in
    "start")
        start_containers
        ;;
    "stop")
        stop_containers
        ;;
    "build")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ build
        build_project "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "validate")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ validate
        validate_infrastructure "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "test")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ test
        run_tests "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "clean")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ clean
        clean_docker "${1:-basic}"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é basic –æ—á–∏—Å—Ç–∫–∞
        ;;
    "logs")
        shift
        if [ -n "$1" ]; then
            docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" logs -f "$1"
        else
            view_logs
        fi
        ;;
    "status")
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ps
        ;;
    "backup")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ backup
        run_backup "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "restore")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ restore
        run_restore "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "security")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ security
        run_security "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "setup-dev")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ setup-dev
        run_setup_dev "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    *)
        log "[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        show_help
        ;;
esac

log "[INFO] –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"