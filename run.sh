#!/bin/bash
set -euo pipefail
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_DIR="${PROJECT_ROOT}/infra/scripts"

# –¶–≤–µ—Ç–∞
NC="\033[0m"; GREEN="\033[0;32m"; YELLOW="\033[0;33m"; RED="\033[0;31m"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏
log() {
    local level="$1"; shift
    # –£–¥–∞–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    level="${level//[\[\]]/}"
    local msg="$*"
    local color="$GREEN"
    case "$level" in
      INFO)  color="$GREEN";;
      WARN)  color="$YELLOW";;
      ERROR) color="$RED";;
    esac
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${color}${level}${NC} ${msg}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log ERROR "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker compose version &> /dev/null; then
        log ERROR "–ü–ª–∞–≥–∏–Ω Docker Compose (docker compose) –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ Docker –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏."
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
    check_docker_daemon_ready
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Docker daemon
check_docker_daemon_ready() {
    local max_attempts=10
    local attempt=1
    local delay=2
    
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker daemon..."
    
    while [ $attempt -le $max_attempts ]; do
        if docker info &>/dev/null; then
            log INFO "Docker daemon –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            check_docker_resources
            return 0
        fi
        
        log WARN "Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts), –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}s..."
        sleep $delay
        attempt=$((attempt + 1))
        delay=$((delay + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    done
    
    log ERROR "Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫!"
    log ERROR "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 'sudo systemctl start docker' (Linux) –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker
check_docker_resources() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
    local total_memory
    if command -v docker system info &>/dev/null; then
        total_memory=$(docker system info --format '{{.MemTotal}}' 2>/dev/null || echo "0")
        if [ "$total_memory" -gt 0 ] && [ "$total_memory" -lt 5368709120 ]; then  # 5GB –≤ –±–∞–π—Ç–∞—Ö
            log WARN "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å –≤ Docker: $(numfmt --to=iec $total_memory). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5GB"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–π Docker
    if ! docker network ls &>/dev/null; then
        log WARN "–ü—Ä–æ–±–ª–µ–º—ã —Å Docker —Å–µ—Ç—è–º–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å volume driver
    if ! docker volume ls &>/dev/null; then
        log WARN "–ü—Ä–æ–±–ª–µ–º—ã —Å Docker volumes, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log "[INFO] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    if [ -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ]; then
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" down -v --remove-orphans
    else
        log "[ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ZooKeeper (–µ—Å–ª–∏ volume —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    ZOOKEEPER_VOLUME=$(docker volume ls -q | grep zookeeper | head -n1 || true)
    if [ -n "$ZOOKEEPER_VOLUME" ]; then
        MNT=$(docker volume inspect "$ZOOKEEPER_VOLUME" -f '{{ .Mountpoint }}')
        if [ -d "$MNT/version-2" ]; then
            log INFO "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ZooKeeper –≤ $MNT..."
            rm -rf "$MNT/version-2"/*
            log INFO "–î–∞–Ω–Ω—ã–µ ZooKeeper –æ—á–∏—â–µ–Ω—ã"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    log "[INFO] –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    stop_containers
    log "[INFO] –ó–∞–ø—É—Å–∫–∞–µ–º docker compose..."

    local compose_file="$PROJECT_ROOT/infra/docker/compose/docker-compose.yml"
    if [ -f "$compose_file" ]; then
        # –¢—è–Ω–µ–º –æ–±—Ä–∞–∑—ã –±–µ–∑ —Å–µ–∫—Ü–∏–∏ build
        docker compose -f "$compose_file" pull --quiet --ignore-buildable 2>/dev/null || true
        # –°–æ–±–∏—Ä–∞–µ–º build-–æ–±—Ä–∞–∑–∞
        docker compose -f "$compose_file" build --quiet
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        docker compose -f "$compose_file" up -d
        wait_healthy 180
    else
        log "[ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
wait_healthy() {
    local max_wait=${1:-180}
    local elapsed=0
    local check_interval=10
    local previous_status=""
    
    log INFO "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–¥–æ ${max_wait}s)..."
    
    while [ $elapsed -lt $max_wait ]; do
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ jq –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        local status_info
        status_info=$(docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ps --format "table {{.Name}}\t{{.Status}}\t{{.Health}}" 2>/dev/null || true)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        local total_containers running_containers healthy_containers
        total_containers=$(echo "$status_info" | tail -n +2 | wc -l)
        running_containers=$(echo "$status_info" | grep -c "Up " || echo "0")
        healthy_containers=$(echo "$status_info" | grep -c "healthy" || echo "0")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        local current_status="$running_containers/$total_containers running, $healthy_containers healthy"
        if [ "$current_status" != "$previous_status" ]; then
            log INFO "–ü—Ä–æ–≥—Ä–µ—Å—Å: $current_status"
            previous_status="$current_status"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if [ "$running_containers" -eq "$total_containers" ] && [ "$healthy_containers" -eq "$total_containers" ]; then
            log INFO "‚úÖ –í—Å–µ $total_containers –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!"
            show_service_endpoints
            return 0
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ failed –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        local failed_containers
        failed_containers=$(echo "$status_info" | grep -E "(Exited|Dead)" | cut -f1 || true)
        if [ -n "$failed_containers" ]; then
            log ERROR "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $failed_containers"
            log ERROR "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './run.sh logs' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            return 1
        fi
        
        sleep $check_interval
        elapsed=$((elapsed + check_interval))
    done
    
    # –¢–∞–π–º–∞—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log WARN "‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ ${max_wait}s"
    log INFO "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    echo "$status_info"
    
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
show_service_endpoints() {
    log INFO "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  ‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:      https://localhost/"
    echo "  ‚Ä¢ API:                 https://localhost/api/"
    echo "  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:          https://localhost/monitoring/ (admin:monitoring123)"
    echo "  ‚Ä¢ Health Check:        https://localhost/health"
    echo ""
    echo "  –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø):"
    echo "  ‚Ä¢ PostgreSQL:          localhost:5432"
    echo "  ‚Ä¢ Kafka:               localhost:19092"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (backend, frontend, Docker images)
build_project() {
    local mode="summary"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
    if [[ "${1:-}" =~ ^(--full|-f)$ ]]; then
        mode="full"
    elif [[ -z "${1:-}" || "${1:-}" =~ ^(--summary|-s)$ ]]; then
        mode="summary"
    else
        log ERROR "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –±–∏–ª–¥–∞: $1"
        exit 1
    fi

    # ========================= Backend =========================
    log INFO "========== –°–±–æ—Ä–∫–∞ backend (${mode}) =========="
    if [ "$mode" = "full" ]; then
        ./gradlew clean build -x test || { log ERROR "Gradle build failed"; exit 1; }
    else
        backend_log=$(mktemp)
        ./gradlew clean build -x test --console=plain >"$backend_log" 2>&1
        if [ $? -eq 0 ]; then
            log INFO "Backend build SUCCESS"
        else
            log ERROR "Backend build FAILED. –ü–æ–ª–Ω—ã–π –ª–æ–≥: $backend_log"
            exit 1
        fi
    fi

    # ========================= Frontend =========================
    log INFO "========== –°–±–æ—Ä–∫–∞ frontend (${mode}) =========="
    if [ "$mode" = "full" ]; then
        (cd frontend && npm ci && npm run build) || { log ERROR "Frontend build failed"; exit 1; }
    else
        frontend_log=$(mktemp)
        (cd frontend && npm ci --silent && npm run build --silent) >"$frontend_log" 2>&1
        if [ $? -eq 0 ]; then
            log INFO "Frontend build SUCCESS"
        else
            log ERROR "Frontend build FAILED. –ü–æ–ª–Ω—ã–π –ª–æ–≥: $frontend_log"
            exit 1
        fi
    fi

    # ========================= Docker images =========================
    log INFO "========== Docker compose build (${mode}) =========="
    if [ "$mode" = "full" ]; then
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" build || { log ERROR "Docker build failed"; exit 1; }
    else
        docker_log=$(mktemp)
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" build --quiet >"$docker_log" 2>&1
        if [ $? -eq 0 ]; then
            log INFO "Docker images build SUCCESS"
        else
            log ERROR "Docker images build FAILED. –ü–æ–ª–Ω—ã–π –ª–æ–≥: $docker_log"
            exit 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    log "[INFO] –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
    if [ -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ]; then
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" logs -f
    else
        log "[ERROR] –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
    echo
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  build [--full|-f|--summary|-s]   –°–æ–±—Ä–∞—Ç—å backend, frontend –∏ –æ–±—Ä–∞–∑—ã Docker (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥)"
    echo "  start                 –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (pull/build + up -d)"
    echo "  stop                  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã"
    echo "  logs [service]        –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (docker compose logs -f)"
    echo "  status                –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (docker compose ps)"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 build                      –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã"
    echo "  $0 start                      –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "  $0 logs api-gateway           Tail -f –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ api-gateway"
    echo "  $0 build --full               –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤"
    echo
    exit 0
}

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_ROOT" || { echo "–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${PROJECT_ROOT}"; exit 1; }

# –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ help, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
if [ $# -eq 0 ]; then
    show_help
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É help
if [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
case "$1" in
    "start")
        start_containers
        ;;
    "stop")
        stop_containers
        ;;
    "build")
        shift  # —É–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ build
        build_project "$@"  # –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        ;;
    "logs")
        shift
        if [ -n "$1" ]; then
            docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" logs -f "$1"
        else
            view_logs
        fi
        ;;
    "status")
        docker compose -f "$PROJECT_ROOT/infra/docker/compose/docker-compose.yml" ps
        ;;
    *)
        log "[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        show_help
        ;;
esac

log "[INFO] –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"