plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.openapi.generator' version '7.2.0' apply false
    id 'com.google.protobuf' version '0.9.4' apply false
    id 'org.owasp.dependencycheck' version '10.0.4' apply false
}

ext {
    set('springBootVersion', '3.3.5')
    set('springCloudVersion', '2023.0.3')
    set('springKafkaVersion', '3.2.4')
    set('grpcVersion', '1.68.1')
    set('protobufVersion', '4.28.3')
    set('openapiVersion', '7.2.0')
    set('lombokVersion', '1.18.34')
    set('liquibaseVersion', '4.29.2')
    set('postgresVersion', '42.7.4')
    set('springDocVersion', '2.6.0')
    set('logstashLogbackVersion', '8.0')
    set('grpcSpringBootStarterVersion', '3.1.0.RELEASE')
    set('jakartaAnnotationVersion', '2.1.1')
    set('javaxAnnotationVersion', '1.3.2')
    set('jsonWebTokenVersion', '0.12.5')
    set('swaggerAnnotationsVersion', '2.2.16')
    set('springSecurityTestVersion', '6.3.4')
    set('h2Version', '2.2.224')
    set('mockitoVersion', '5.14.2')
    set('junitVersion', '5.11.3')
    set('protobufPluginVersion', '0.9.4')
    set('jakartaValidationVersion', '3.0.2')
    set('hibernateValidatorVersion', '8.0.2.Final')
    set('glassfishElVersion', '4.0.2')
}

// Load version from properties file
def versionProps = new Properties()
file('version.properties').withInputStream { versionProps.load(it) }

def versionMajor = versionProps['version.major']
def versionMinor = versionProps['version.minor']
def versionPatch = versionProps['version.patch']
def versionSuffix = versionProps['version.suffix']

def buildVersion = "${versionMajor}.${versionMinor}.${versionPatch}"
if (versionSuffix && !versionSuffix.isEmpty()) {
    buildVersion += "-${versionSuffix}"
}

allprojects {
    group = 'org.aquastream'
    version = buildVersion

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.owasp.dependencycheck'
    
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
        options.deprecation = true
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        testImplementation platform("org.junit:junit-bom:${junitVersion}")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    test {
        useJUnitPlatform()
    }

    dependencyCheck {
        formats = ['SARIF', 'HTML']
        outputDirectory = "${buildDir}/reports"
        failBuildOnCVSS = 7.0
        nvd {
            apiKey = System.getenv('NVD_API_KEY')
        }
        skip = System.getenv('NVD_API_KEY') == null
    }
}
