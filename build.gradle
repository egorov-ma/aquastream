// Critical fix for Gradle 8.5 + Spring Boot 3.3.5 commons-compress compatibility

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.openapi.generator' version '7.2.0' apply false
    id 'com.google.protobuf' version '0.9.4' apply false
    id 'org.owasp.dependencycheck' version '10.0.4' apply false
    id 'com.github.ben-manes.versions' version '0.51.0'
}

// Enforce dependency resolution across all projects
allprojects {
    configurations.all {
        resolutionStrategy {
            force "org.apache.commons:commons-compress:1.26.2"
        }
    }
}

ext {
    set('springBootVersion', '3.3.5')
    set('springCloudVersion', '2023.0.3')
    set('springKafkaVersion', '3.2.4')
    set('grpcVersion', '1.64.0')
    set('protobufVersion', '3.25.4')
    set('openapiVersion', '7.2.0')
    set('lombokVersion', '1.18.34')
    set('liquibaseVersion', '4.29.2')
    set('postgresVersion', '42.7.4')
    set('springDocVersion', '2.6.0')
    set('bucket4jVersion', '8.10.1')
    set('logstashLogbackVersion', '8.0')
    set('grpcSpringBootStarterVersion', '3.1.0.RELEASE')
    set('jakartaAnnotationVersion', '2.1.1')
    set('javaxAnnotationVersion', '1.3.2')
    set('jsonWebTokenVersion', '0.12.6')
    set('swaggerAnnotationsVersion', '2.2.16')
    set('springSecurityTestVersion', '6.3.4')
    set('h2Version', '2.2.224')
    set('mockitoVersion', '5.14.2')
    set('junitVersion', '5.11.3')
    set('protobufPluginVersion', '0.9.4')
    set('jakartaValidationVersion', '3.0.2')
    set('hibernateValidatorVersion', '8.0.2.Final')
    set('glassfishElVersion', '4.0.2')
    set('testcontainersVersion', '1.19.7')
    set('grpcTestingVersion', '1.64.0')
    set('googleCommonProtosVersion', '2.29.0')
    set('grpcGatewayVersion', '1.64.0')
    // Centralized versions for third-party libs
    set('hypersistenceVersion', '3.6.0')
    set('hibernateTypesVersion', '2.21.1')
    set('jacksonVersion', '2.17.2')
    set('minioVersion', '8.5.7')
    set('archunitVersion', '1.3.0')
}

// Load version from properties file
def versionProps = new Properties()
file('version.properties').withInputStream { versionProps.load(it) }

def versionMajor = versionProps['version.major']
def versionMinor = versionProps['version.minor']
def versionPatch = versionProps['version.patch']
def versionSuffix = versionProps['version.suffix']

def buildVersion = "${versionMajor}.${versionMinor}.${versionPatch}"
if (versionSuffix && !versionSuffix.isEmpty()) {
    buildVersion += "-${versionSuffix}"
}

allprojects {
    group = 'org.aquastream'
    version = buildVersion

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: com.aquastream.JavaLibraryConventionsPlugin
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.owasp.dependencycheck'
    
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked', '-parameters']
        options.deprecation = true
        options.encoding = 'UTF-8'
    }
    
    // Отключаем donation message от OpenAPI Generator
    System.setProperty('org.openapitools.codegen.suppressDonationMessage', 'true')

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
            mavenBom "com.fasterxml.jackson:jackson-bom:${jacksonVersion}"
        }
    }

    dependencies {
        testImplementation platform("org.junit:junit-bom:${junitVersion}")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.testcontainers:junit-jupiter'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = false
        }
        reports {
            html.required = true
            junitXml.required = true
        }
        maxParallelForks = (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
    }

    // Optional integration test profile (available if sources exist)
    sourceSets {
        integrationTest {
            java.srcDir file('src/integrationTest/java')
            resources.srcDir file('src/integrationTest/resources')
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    tasks.register('integrationTest', Test) {
        description = 'Runs integration tests.'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = false
        }
        reports {
            html.required = true
            junitXml.required = true
        }
        maxParallelForks = (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
        shouldRunAfter test
    }

    tasks.named('check') { dependsOn tasks.named('integrationTest') }

    dependencyCheck {
        formats = ['SARIF', 'HTML']
        outputDirectory = "${buildDir}/reports"
        failBuildOnCVSS = 7.0
        suppressionFile = rootProject.file('owasp-suppression.xml')
        nvd {
            apiKey = System.getenv('NVD_API_KEY')
        }
        skip = System.getenv('NVD_API_KEY') == null
    }
}

// Apply Spring Boot plugin only to API modules
subprojects {
    if (project.name.endsWith('-api') || project.name == 'backend-gateway') {
        apply plugin: com.aquastream.SpringBootApiConventionsPlugin
    }
}

// Enable dependency locking for reproducible builds
subprojects {
    dependencyLocking {
        lockAllConfigurations()
        lockMode = org.gradle.api.artifacts.dsl.LockMode.STRICT
    }
}

// Standardize jar/bootJar across modules
configure(subprojects.findAll { it.name.endsWith('-db') || it.name.endsWith('-service') }) {
    // Library modules should produce plain JARs
    tasks.named('jar') {
        enabled = true
        archiveClassifier = ''
    }
    // If Spring Boot plugin is applied, disable bootJar for libraries
    plugins.withId('org.springframework.boot') {
        tasks.named('bootJar') { enabled = false }
    }
}

configure(subprojects.findAll { it.name.endsWith('-api') }) {
    // Executable modules should produce bootJar when Spring Boot is applied
    plugins.withId('org.springframework.boot') {
        tasks.named('jar') { enabled = false }
        tasks.named('bootJar') { enabled = true }
    }
}
