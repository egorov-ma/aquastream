package org.aquastream.notification.service.telegram.handler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aquastream.notification.service.config.TelegramProperties;
import org.aquastream.notification.service.telegram.TelegramBotService;
import org.aquastream.notification.service.telegram.TelegramSecurityService;
import org.aquastream.notification.service.telegram.dto.TelegramCallbackQuery;
import org.aquastream.notification.service.telegram.dto.TelegramMessage;
import org.aquastream.notification.service.user.UserLinkService;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class TelegramCommandHandler {

    private final TelegramBotService telegramBotService;
    private final TelegramSecurityService securityService;
    private final UserLinkService userLinkService;
    private final TelegramProperties telegramProperties;

    /**
     * Handle bot commands (/start, /help, etc.)
     */
    public void handleCommand(Long chatId, Long userId, String username, String text, TelegramMessage message) {
        if (securityService.isRateLimited(userId)) {
            log.warn("Rate limited user {}", userId);
            return;
        }

        String sanitizedText = securityService.sanitizeUserInput(text);
        if (sanitizedText == null || sanitizedText.trim().isEmpty()) {
            return;
        }

        String[] parts = sanitizedText.trim().split("\\s+", 2);
        String command = parts[0].toLowerCase();
        String args = parts.length > 1 ? parts[1] : "";

        log.info("Processing command '{}' from user {} with args: '{}'", command, userId, args);

        switch (command) {
            case "/start" -> handleStartCommand(chatId, userId, username, args);
            case "/help" -> handleHelpCommand(chatId, userId);
            case "/stop" -> handleStopCommand(chatId, userId);
            case "/verify" -> handleVerifyCommand(chatId, userId, args);
            case "/status" -> handleStatusCommand(chatId, userId);
            default -> handleUnknownCommand(chatId, command);
        }
    }

    /**
     * Handle /start command with deep-link support
     */
    private void handleStartCommand(Long chatId, Long userId, String username, String args) {
        String welcomeMessage = "üåä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AquaStream!\n\n" +
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö, " +
                "—Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Å–æ–±—ã—Ç–∏—è—Ö.\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n" +
                "/stop - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";

        // Check if this is a deep-link with verification code
        if (args != null && !args.trim().isEmpty()) {
            String linkCode = args.trim();
            log.info("Processing account linking with code: {} for user: {}", linkCode, userId);
            
            try {
                // Attempt to link the account
                boolean success = userLinkService.confirmTelegramLink(linkCode, chatId, userId, username);
                
                if (success) {
                    String successMessage = "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n" +
                            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n" +
                            "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n" +
                            "‚Ä¢ –°—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π\n" +
                            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö\n" +
                            "‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –º–µ—Å—Ç –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è\n\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";
                    
                    telegramBotService.sendMessage(chatId, successMessage);
                } else {
                    String errorMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n\n" +
                            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥\n" +
                            "‚Ä¢ –ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n" +
                            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.";
                    
                    telegramBotService.sendMessage(chatId, errorMessage);
                }
                
            } catch (Exception e) {
                log.error("Error linking account for user {} with code {}", userId, linkCode, e);
                
                String errorMessage = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n" +
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
                
                telegramBotService.sendMessage(chatId, errorMessage);
            }
        } else {
            // Regular start command without deep-link
            telegramBotService.sendMessage(chatId, welcomeMessage);
        }
    }

    /**
     * Handle /help command
     */
    private void handleHelpCommand(Long chatId, Long userId) {
        String helpMessage = "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ AquaStream –±–æ—Ç—É\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" +
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
                "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n" +
                "/stop - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n" +
                "‚ùì –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:\n" +
                "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç AquaStream\n" +
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n" +
                "3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n" +
                "4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥\n\n" +
                "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @aquastream_support";

        telegramBotService.sendMessage(chatId, helpMessage);
    }

    /**
     * Handle /stop command
     */
    private void handleStopCommand(Long chatId, Long userId) {
        try {
            boolean success = userLinkService.deactivateTelegramSubscription(chatId, userId);
            
            if (success) {
                String message = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n" +
                        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç AquaStream.\n\n" +
                        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, " +
                        "–ø–µ—Ä–µ–ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.";
                
                telegramBotService.sendMessage(chatId, message);
            } else {
                String message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n" +
                        "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω.";
                
                telegramBotService.sendMessage(chatId, message);
            }
            
        } catch (Exception e) {
            log.error("Error deactivating subscription for user {}", userId, e);
            
            String message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
            
            telegramBotService.sendMessage(chatId, message);
        }
    }

    /**
     * Handle /verify command with code
     */
    private void handleVerifyCommand(Long chatId, Long userId, String args) {
        if (args == null || args.trim().isEmpty()) {
            String message = "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /verify <–∫–æ–¥>\n" +
                    "–ü—Ä–∏–º–µ—Ä: /verify ABC123\n\n" +
                    "–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ AquaStream.";
            
            telegramBotService.sendMessage(chatId, message);
            return;
        }

        // Same logic as /start with deep-link
        handleStartCommand(chatId, userId, null, args.trim());
    }

    /**
     * Handle /status command
     */
    private void handleStatusCommand(Long chatId, Long userId) {
        try {
            boolean isLinked = userLinkService.isTelegramLinked(chatId, userId);
            
            String message;
            if (isLinked) {
                message = "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω\n\n" +
                        "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ AquaStream.\n" +
                        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö.\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.";
            } else {
                message = "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n\n" +
                        "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ AquaStream.\n\n" +
                        "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:\n" +
                        "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n" +
                        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n" +
                        "3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'";
            }
            
            telegramBotService.sendMessage(chatId, message);
            
        } catch (Exception e) {
            log.error("Error checking status for user {}", userId, e);
            
            String message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n\n" +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
            
            telegramBotService.sendMessage(chatId, message);
        }
    }

    /**
     * Handle unknown commands
     */
    private void handleUnknownCommand(Long chatId, String command) {
        String message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command + "\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
        
        telegramBotService.sendMessage(chatId, message);
    }

    /**
     * Handle regular text messages (non-commands)
     */
    public void handleTextMessage(Long chatId, Long userId, String username, String text) {
        if (securityService.isRateLimited(userId)) {
            return;
        }

        log.debug("Received text message from user {}: {}", userId, text);
        
        // For now, just respond with help message
        String message = "–ü—Ä–∏–≤–µ—Ç! üëã\n\n" +
                "–Ø –±–æ—Ç AquaStream –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
        
        telegramBotService.sendMessage(chatId, message);
    }

    /**
     * Handle callback queries from inline keyboards
     */
    public void handleCallbackQuery(Long chatId, Long userId, String data, TelegramCallbackQuery callbackQuery) {
        if (securityService.isRateLimited(userId)) {
            return;
        }

        log.info("Processing callback query from user {}: {}", userId, data);
        
        // Handle different callback data patterns
        if (data.startsWith("link_")) {
            handleLinkCallback(chatId, userId, data);
        } else if (data.startsWith("prefs_")) {
            handlePreferencesCallback(chatId, userId, data);
        } else {
            log.warn("Unknown callback data pattern: {}", data);
        }
    }

    private void handleLinkCallback(Long chatId, Long userId, String data) {
        // Handle account linking callbacks
        String message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º.";
        telegramBotService.sendMessage(chatId, message);
    }

    private void handlePreferencesCallback(Long chatId, Long userId, String data) {
        // Handle notification preferences callbacks
        String message = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.";
        telegramBotService.sendMessage(chatId, message);
    }
}